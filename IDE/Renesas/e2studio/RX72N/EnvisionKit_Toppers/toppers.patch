diff -cr --new-file asp/arch/rx_gcc/rx72n/MANIFEST 1.9.1_update/arch/rx_gcc/rx72n/MANIFEST
*** asp/arch/rx_gcc/rx72n/MANIFEST	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/MANIFEST	Fri Dec 23 09:35:56 2022
***************
*** 24,33 ****
  prc_test.src
  prc_unrename.h
  prc_user.txt
! rx610.h
! rx610.tf
! rx610_config.c
! rx610_config.h
  start.src
  
  INCLUDE ../../target/rsk_rx_hew/MANIFEST
--- 24,33 ----
  prc_test.src
  prc_unrename.h
  prc_user.txt
! RX72n.h
! RX72n.tf
! RX72n_config.c
! RX72n_config.h
  start.src
  
  INCLUDE ../../target/rsk_rx_hew/MANIFEST
diff -cr --new-file asp/arch/rx_gcc/rx72n/Makefile.prc 1.9.1_update/arch/rx_gcc/rx72n/Makefile.prc
*** asp/arch/rx_gcc/rx72n/Makefile.prc	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/Makefile.prc	Fri Dec 23 09:35:56 2022
***************
*** 16,22 ****
  #  コンパイルオプション
  #
  INCLUDES := $(INCLUDES) -I$(ARCH_SYS_DIR)
! CDEFS := $(CDEFS)
  COPTS := $(COPTS)
  
  #
--- 16,22 ----
  #  コンパイルオプション
  #
  INCLUDES := $(INCLUDES) -I$(ARCH_SYS_DIR)
! CDEFS := $(CDEFS) 
  COPTS := $(COPTS)
  
  #
***************
*** 24,30 ****
  #
  KERNEL_DIR := $(KERNEL_DIR) $(ARCH_SYS_DIR)
  KERNEL_ASMOBJS := $(KERNEL_ASMOBJS)
! KERNEL_COBJS := $(KERNEL_COBJS) rx63n_config.o rx63n_support.o
  
  #
  #  システムサービスに関する定義
--- 24,30 ----
  #
  KERNEL_DIR := $(KERNEL_DIR) $(ARCH_SYS_DIR)
  KERNEL_ASMOBJS := $(KERNEL_ASMOBJS)
! KERNEL_COBJS := $(KERNEL_COBJS) rx72n_config.o rx72n_support.o
  
  #
  #  システムサービスに関する定義
***************
*** 44,50 ****
  #
  #  依存関係の定義
  #
! kernel_cfg.timestamp: $(ARCH_SYS_DIR)/rx63n.tf $(ARCH_SYS_DIR)/prc.tf
  #kernel_cfg.timestamp: $(ARCH_COM_DIR)/prc.tf
  
  
--- 44,50 ----
  #
  #  依存関係の定義
  #
! kernel_cfg.timestamp: $(ARCH_SYS_DIR)/rx72n.tf $(ARCH_SYS_DIR)/prc.tf
  #kernel_cfg.timestamp: $(ARCH_COM_DIR)/prc.tf
  
  
diff -cr --new-file asp/arch/rx_gcc/rx72n/prc.tf 1.9.1_update/arch/rx_gcc/rx72n/prc.tf
*** asp/arch/rx_gcc/rx72n/prc.tf	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/prc.tf	Fri Dec 23 09:35:56 2022
***************
*** 37,43 ****
  $ 
  
  $ 
! $  アーキテクチャ依存テンプレート（RX610用）
  $ 
  
  
--- 37,43 ----
  $ 
  
  $ 
! $  アーキテクチャ依存テンプレート（RX72n用）from rx63n
  $ 
  
  
***************
*** 291,297 ****
  ;$NL$
  $NL$
  
! $TAB$.extern $TAB$ _start$NL$$NL$
  
  $FOREACH inhno INH.ORDER_LIST$
  	$IF ((INH.INHATR[inhno] & TA_NONKERNEL) != 0)$
--- 291,297 ----
  ;$NL$
  $NL$
  
! $TAB$.extern $TAB$ _startw$NL$$NL$
  
  $FOREACH inhno INH.ORDER_LIST$
  	$IF ((INH.INHATR[inhno] & TA_NONKERNEL) != 0)$
***************
*** 352,359 ****
  $TAB$ .word$TAB$ _$EXCHDR[25]$ $TAB$ $TAB$ ;$SPC$ 25:浮動小数点例外 $SPC$$NL$
  $TAB$ .space$TAB$ 0x10$NL$
  $TAB$ .word$TAB$ _$EXCHDR[30]$ $TAB$ $TAB$ ;$SPC$ 30:ノンマスカブル例外 $SPC$$NL$
! $TAB$ .word$TAB$ _start $TAB$ $TAB$ $TAB$ $TAB$ ;$SPC$ 31:リセット $SPC$$NL$
! 
  $NL$ $NL$
  
  	$TAB$.end
--- 352,359 ----
  $TAB$ .word$TAB$ _$EXCHDR[25]$ $TAB$ $TAB$ ;$SPC$ 25:浮動小数点例外 $SPC$$NL$
  $TAB$ .space$TAB$ 0x10$NL$
  $TAB$ .word$TAB$ _$EXCHDR[30]$ $TAB$ $TAB$ ;$SPC$ 30:ノンマスカブル例外 $SPC$$NL$
! ;$TAB$ .word$TAB$ _startw $TAB$ $TAB$ $TAB$ $TAB$ ;$SPC$ 31:リセット $SPC$$NL$
! ;wata
  $NL$ $NL$
  
  	$TAB$.end
diff -cr --new-file asp/arch/rx_gcc/rx72n/prc_stddef.h 1.9.1_update/arch/rx_gcc/rx72n/prc_stddef.h
*** asp/arch/rx_gcc/rx72n/prc_stddef.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/prc_stddef.h	Fri Dec 23 09:35:56 2022
***************
*** 37,43 ****
   */
  
  /*
!  *		t_stddef.hのプロセッサ依存部（RX63n用）
   *
   *  このインクルードファイルは，target_stddef.h（または，そこからインク
   *  ルードされるファイル）のみからインクルードされる．他のファイルから
--- 37,43 ----
   */
  
  /*
!  *		t_stddef.hのプロセッサ依存部（RX72n用）from RX62n
   *
   *  このインクルードファイルは，target_stddef.h（または，そこからインク
   *  ルードされるファイル）のみからインクルードされる．他のファイルから
***************
*** 50,55 ****
  /*
   *  ターゲットを識別するためのマクロの定義
   */
! #define TOPPERS_RX63N				/* プロセッサ略称 */
  
  #endif /* TOPPERS_PRC_STDDEF_H */
--- 50,55 ----
  /*
   *  ターゲットを識別するためのマクロの定義
   */
! #define TOPPERS_RX72N				/* プロセッサ略称 */
  
  #endif /* TOPPERS_PRC_STDDEF_H */
diff -cr --new-file asp/arch/rx_gcc/rx72n/prc_syssvc.h 1.9.1_update/arch/rx_gcc/rx72n/prc_syssvc.h
*** asp/arch/rx_gcc/rx72n/prc_syssvc.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/prc_syssvc.h	Fri Dec 23 09:35:56 2022
***************
*** 36,42 ****
   */
  
  /*
!  *		テストプログラムのターゲット依存定義（RX63n用）
   */
  
  #ifndef TOPPERS_PRC_SYSSVC_H
--- 36,42 ----
   */
  
  /*
!  *		テストプログラムのターゲット依存定義（RX72n用）
   */
  
  #ifndef TOPPERS_PRC_SYSSVC_H
diff -cr --new-file asp/arch/rx_gcc/rx72n/rx72n.h 1.9.1_update/arch/rx_gcc/rx72n/rx72n.h
*** asp/arch/rx_gcc/rx72n/rx72n.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/rx72n.h	Fri Dec 23 09:35:56 2022
***************
*** 37,46 ****
   */
  
  /*
!  *  RX63nに依存する定義
   */
! #ifndef TOPPERS_RX63N_H
! #define TOPPERS_RX63N_H
  
  #include <sil.h>
  
--- 37,46 ----
   */
  
  /*
!  *  RX72nに依存する定義
   */
! #ifndef TOPPERS_RX72n_H
! #define TOPPERS_RX72n_H
  
  #include <sil.h>
  
***************
*** 65,71 ****
  #define INT_ICU_SWINT       27
  #define INT_CMT0_CMI0		28
  #define INT_CMT1_CMI1		29
! #define INT_CMT2_CMI2		30
  #define INT_CMT3_CMI3		31
  #define INT_ETHER_EINT      32
  #define INT_USB0_D0FIFO0    33
--- 65,71 ----
  #define INT_ICU_SWINT       27
  #define INT_CMT0_CMI0		28
  #define INT_CMT1_CMI1		29
! #define INT_CMT2_CMI2		128
  #define INT_CMT3_CMI3		31
  #define INT_ETHER_EINT      32
  #define INT_USB0_D0FIFO0    33
***************
*** 125,130 ****
--- 125,132 ----
  #define INT_ICU_GROUP4      110
  #define INT_ICU_GROUP5      111
  #define INT_ICU_GROUP6      112
+ #define INT_EDMAC0  113
+ 
  #define INT_ICU_GROUP12     114
  #define INT_SCI12_SCIX0     122
  #define INT_SCI12_SCIX1     123
***************
*** 134,140 ****
  //TPU define
  #define INT_TPU0_TGI0A		126
  #define INT_TPU0_TGI0B		127
! #define INT_TPU0_TGI0C		128
  #define INT_TPU0_TGI0D		129
  #define INT_TPU1_TGI1A		130
  #define INT_TPU1_TGI1B		131
--- 136,142 ----
  //TPU define
  #define INT_TPU0_TGI0A		126
  #define INT_TPU0_TGI0B		127
! #define INT_TPU0_TGI0C		30
  #define INT_TPU0_TGI0D		129
  #define INT_TPU1_TGI1A		130
  #define INT_TPU1_TGI1B		131
***************
*** 2034,2038 ****
  
  //Ethernet DMAC base address
  #define EDMAC_BASE_ADDR  0x000C0000
! #endif	/* TOPPERS_RX63N_H */
  
--- 2036,2040 ----
  
  //Ethernet DMAC base address
  #define EDMAC_BASE_ADDR  0x000C0000
! #endif	/* TOPPERS_RX72n_H */
  
diff -cr --new-file asp/arch/rx_gcc/rx72n/rx72n.tf 1.9.1_update/arch/rx_gcc/rx72n/rx72n.tf
*** asp/arch/rx_gcc/rx72n/rx72n.tf	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/rx72n.tf	Fri Dec 23 09:35:56 2022
***************
*** 1,11 ****
  $ 
! $		アーキテクチャ依存テンプレート（RX63n用）
  $ 
  
  
  
  /*$NL$
! $SPC$*  Architecture-dependent Definitions (RX63n)$NL$
  $SPC$*/$NL$
  $NL$
  
--- 1,11 ----
  $ 
! $		アーキテクチャ依存テンプレート（RX72n用）
  $ 
  
  
  
  /*$NL$
! $SPC$*  Architecture-dependent Definitions (RX72n)$NL$
  $SPC$*/$NL$
  $NL$
  
***************
*** 15,21 ****
  $  RX610では割込み番号と割込みハンドラ番号が1対1で対応する．
  $ 
  
! $INTNO_VALID = { 16, 21, 23 ; 27, 28,...,59 ; 62 ; 64, 65,...,79 ; 90, 91,...,93 ; 98 , 102 ; 106, 107,...,112 ; 114; 122, 123,...,167 ; 170, 171,...,203 ; 206, 207,...,210 ; 214, 215,...,253 }$
  $INHNO_VALID = INTNO_VALID$
  
  $ 
--- 15,21 ----
  $  RX610では割込み番号と割込みハンドラ番号が1対1で対応する．
  $ 
  
! $INTNO_VALID = { 16, 21, 23 ; 27, 28,...,59 ; 62 ; 64, 65,...,79 ; 90, 91,...,93 ; 98 , 102 ; 106, 107,...,113 ; 114; 122, 123,...,167 ; 170, 171,...,203 ; 206, 207,...,210 ; 214, 215,...,253 }$
  $INHNO_VALID = INTNO_VALID$
  
  $ 
***************
*** 47,51 ****
  $  プロセッサ依存のテンプレートファイルのインクルード
  $ 
  
! $INCLUDE"rx_gcc/rx63n/prc.tf"$
  
--- 47,51 ----
  $  プロセッサ依存のテンプレートファイルのインクルード
  $ 
  
! $INCLUDE"rx_gcc/RX72n/prc.tf"$
  
diff -cr --new-file asp/arch/rx_gcc/rx72n/rx72n_config.c 1.9.1_update/arch/rx_gcc/rx72n/rx72n_config.c
*** asp/arch/rx_gcc/rx72n/rx72n_config.c	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/rx72n_config.c	Fri Dec 23 09:35:56 2022
***************
*** 40,46 ****
  #include <kernel_impl.h>
  
  /*
!  *		プロセッサ依存モジュール（RX63n用）
   */
  
  #define NULL_OFF 0 //reserved IPR 
--- 40,46 ----
  #include <kernel_impl.h>
  
  /*
!  *		プロセッサ依存モジュール（RX72n用）
   */
  
  #define NULL_OFF 0 //reserved IPR 
***************
*** 126,132 ****
  	ICU_IPR6E_OFFSET,					/* No.110  ICU GROUP4  */
  	ICU_IPR6F_OFFSET,					/* No.111  ICU GROUP5  */
  	ICU_IPR70_OFFSET,					/* No.112  ICU GROUP6  */
! 	NULL_OFF,                           /* No.113 予約 */
  	ICU_IPR72_OFFSET,                 /* No.114  ICU Group12  */
  	NULL_OFF, NULL_OFF, NULL_OFF, NULL_OFF, NULL_OFF,   /* No.115 - 119 予約 */
  	NULL_OFF, NULL_OFF,                     /* No.120 - 121 予約 */
--- 126,132 ----
  	ICU_IPR6E_OFFSET,					/* No.110  ICU GROUP4  */
  	ICU_IPR6F_OFFSET,					/* No.111  ICU GROUP5  */
  	ICU_IPR70_OFFSET,					/* No.112  ICU GROUP6  */
! 	ICU_IPR71_OFFSET,                           /* No.113 予約 */
  	ICU_IPR72_OFFSET,                 /* No.114  ICU Group12  */
  	NULL_OFF, NULL_OFF, NULL_OFF, NULL_OFF, NULL_OFF,   /* No.115 - 119 予約 */
  	NULL_OFF, NULL_OFF,                     /* No.120 - 121 予約 */
diff -cr --new-file asp/arch/rx_gcc/rx72n/rx72n_config.h 1.9.1_update/arch/rx_gcc/rx72n/rx72n_config.h
*** asp/arch/rx_gcc/rx72n/rx72n_config.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/rx72n_config.h	Fri Dec 23 09:35:56 2022
***************
*** 37,43 ****
   */
  
  /*
!  *		プロセッサ依存モジュール（RX63n用）
   *
   *  このインクルードファイルは，target_config.h（または，そこからインク
   *  ルードされるファイル）のみからインクルードされる．他のファイルから
--- 37,43 ----
   */
  
  /*
!  *		プロセッサ依存モジュール（RX72n用）
   *
   *  このインクルードファイルは，target_config.h（または，そこからインク
   *  ルードされるファイル）のみからインクルードされる．他のファイルから
***************
*** 45,54 ****
   */
  
  
! #ifndef TOPPERS_RX63N_CONFIG_H
! #define TOPPERS_RX63N_CONFIG_H
  
! #define ARCH_RENESAS_RX63N
  
  /*
   *  割込み要因数
--- 45,54 ----
   */
  
  
! #ifndef TOPPERS_RX72n_CONFIG_H
! #define TOPPERS_RX72n_CONFIG_H
  
! #define ARCH_RENESAS_RX72n
  
  /*
   *  割込み要因数
***************
*** 71,79 ****
  #endif
  
  /*
!  *  プロセッサ依存モジュール（RX63n用）
   */
  #include "rx_gcc/rx_common/prc_config.h"
  
! #endif	/* TOPPERS_RX610_CONFIG_H */
  
--- 71,79 ----
  #endif
  
  /*
!  *  プロセッサ依存モジュール（RX72n用）
   */
  #include "rx_gcc/rx_common/prc_config.h"
  
! #endif	/* TOPPERS_RX72n_CONFIG_H */
  
diff -cr --new-file asp/arch/rx_gcc/rx72n/rx72n_support.c 1.9.1_update/arch/rx_gcc/rx72n/rx72n_support.c
*** asp/arch/rx_gcc/rx72n/rx72n_support.c	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/rx72n_support.c	Fri Dec 23 09:35:56 2022
***************
*** 37,43 ****
   *
   */
  #include <kernel.h>
! #include <rx63n.h>
  
  void set_init_moudlestop_setting(){
      /* power management setting*/
--- 37,43 ----
   *
   */
  #include <kernel.h>
! #include <RX72n.h>
  
  void set_init_moudlestop_setting(){
      /* power management setting*/
diff -cr --new-file asp/arch/rx_gcc/rx72n/start.S 1.9.1_update/arch/rx_gcc/rx72n/start.S
*** asp/arch/rx_gcc/rx72n/start.S	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx72n/start.S	Fri Dec 23 09:35:56 2022
***************
*** 37,89 ****
  ;*  かなる損害に関しても，その責任を負わない．
  ;* 
  
! 
  #define TOPPERS_MACRO_ONLY
  #define UINT_C(val)		(val)		/* uint_t型の定数を作るマクロ */
  #define ULONG_C(val)	(val)		/* ulong_t型の定数を作るマクロ */
  #define CAST(type, val)	(val)		/* 型キャストを行うマクロ */
  #include "kernel_impl.h"
- 	;
- 	;  メモリマップの定義(ターゲット依存部)
- 	;
  
- ;
- ;  初期化ルーチン
- ;
  .text
  .balign 4
! .global _start
! 
! .equ DFLRE,	0x007FC440		; DFLREレジスタ
! .equ DB_BLOCK_ENABLE, 0x2DFF
  		
! _start:
! 	;
! 	;  電源投入後はレベル0, 全割込み禁止状態である.
! 	;  カーネルでは高速割込みを使用しないため、BPC, BPSW及びFINTV
! 	;  の初期化は行わない.
! 	;
  
- 	;
- 	;  内臓ROM（データフラッシュ）領域の設定
- 	;
- 	;  リセット後, データフラッシュ領域は読み出し禁止となっている
- 	;  ため, 読み出し許可に設定する.
- 	;
-     //led check   
- 	mov.l	#DFLRE, r5
- 	mov.w	#DB_BLOCK_ENABLE, [R5]
- 	
- 	;
- 	;  スタックポインタの設定
- 	;
- 	;  ユーザにて非タスクコンテキスト用スタック領域を用意した場合,
- 	;  ユーザ領域を設定する.
- 	;  kernel_cfg.cにて"_kernel_istkpt"の値を決定する.
- 	;
- 	mov.l	#__kernel_istkpt, r5
- 	mov.l	[r5], r0			; 非タスクコンテキスト用スタック領域を設定
- 	;
  	;  可変ベクタテーブルの設定
  	;
  	mvtc	#__vvector_table, intb			; ベクタテーブルの設定
--- 37,55 ----
  ;*  かなる損害に関しても，その責任を負わない．
  ;* 
  
! #if 1
  #define TOPPERS_MACRO_ONLY
  #define UINT_C(val)		(val)		/* uint_t型の定数を作るマクロ */
  #define ULONG_C(val)	(val)		/* ulong_t型の定数を作るマクロ */
  #define CAST(type, val)	(val)		/* 型キャストを行うマクロ */
  #include "kernel_impl.h"
  
  .text
  .balign 4
! .global _startw
  		
! _startw:
  
  	;  可変ベクタテーブルの設定
  	;
  	mvtc	#__vvector_table, intb			; ベクタテーブルの設定
***************
*** 100,119 ****
  	;  初期値あり変数領域の初期化
  	;
  init_D:
-     mov.l	#__idata_start, r2
-     mov.l	#__data_start, r1
-     mov.l	#__data_end, r3
-     sub	r1, r3
-     smovf
  	;
  	;  初期値なし変数領域の初期化
  	;
  clear_B:
-     mov.l	#0, r2
-     mov.l	#__bss_end, r3
-     mov.l	#__bss_start, r1
-     sub	r1, r3
-     sstr.b
  
  	;
  	;  software_init_hook を呼出し（0 でない場合）
--- 66,75 ----
***************
*** 134,137 ****
  
  
  .end
! 
--- 90,93 ----
  
  
  .end
! #endif
diff -cr --new-file asp/arch/rx_gcc/rx_common/prc_config.c 1.9.1_update/arch/rx_gcc/rx_common/prc_config.c
*** asp/arch/rx_gcc/rx_common/prc_config.c	Mon Dec 26 16:54:23 2022
--- 1.9.1_update/arch/rx_gcc/rx_common/prc_config.c	Fri Dec 23 09:35:57 2022
***************
*** 59,65 ****
  uint32_t	saved_ipl;		/* 割込み優先度レベルを保存する変数 */
  #endif	/* TIPM_LOCK != -15	*/
  
! 
  /*
   *  プロセッサ依存の初期化
   */
--- 59,65 ----
  uint32_t	saved_ipl;		/* 割込み優先度レベルを保存する変数 */
  #endif	/* TIPM_LOCK != -15	*/
  
! uint32_t	saved_psw;
  /*
   *  プロセッサ依存の初期化
   */
diff -cr --new-file asp/arch/rx_gcc/rx_common/prc_rename.h 1.9.1_update/arch/rx_gcc/rx_common/prc_rename.h
*** asp/arch/rx_gcc/rx_common/prc_rename.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx_common/prc_rename.h	Fri Dec 23 09:35:57 2022
***************
*** 9,14 ****
--- 9,15 ----
  #define intnest						_kernel_intnest
  #define lock_flag					_kernel_lock_flag
  #define saved_ipl					_kernel_saved_ipl
+ #define saved_psw					_kernel_saved_psw
  #define prc_initialize				_kernel_prc_initialize
  #define prc_terminate				_kernel_prc_terminate
  #define x_config_int				_kernel_x_config_int
***************
*** 39,44 ****
--- 40,47 ----
  #define _intnest					__kernel_intnest
  #define _lock_flag					__kernel_lock_flag
  #define _saved_ipl					__kernel_saved_ipl
+ #define _saved_psw					__kernel_saved_psw
+ 
  #define _prc_initialize				__kernel_prc_initialize
  #define _prc_terminate				__kernel_prc_terminate
  #define _x_config_int				__kernel_x_config_int
diff -cr --new-file asp/arch/rx_gcc/rx_common/prc_support.S 1.9.1_update/arch/rx_gcc/rx_common/prc_support.S
*** asp/arch/rx_gcc/rx_common/prc_support.S	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx_common/prc_support.S	Fri Dec 23 09:35:57 2022
***************
*** 89,94 ****
--- 89,97 ----
  ;  構造体アクセスのオフセット定義
  ;
  #define TOPPERS_MACRO_ONLY
+ ; RENESAS RX72N BSP使用の場合
+ #define RENESAS_RX72N_BSP
+ 
  #include "offset.h"
  #include "asm_config.inc"
  
***************
*** 99,104 ****
--- 102,108 ----
  ;
  
  	.extern	__kernel_istkpt
+     .extern _istack
  
  	.extern	__kernel_p_runtsk
  	.extern	__kernel_p_schedtsk
***************
*** 378,385 ****
--- 382,393 ----
  ;  スクディスパッチの防止という2つの意味がある．
  ;
  dispatcher_pre_idle:
+ #ifdef RENESAS_RX72N_BSP
+     mov.l   #_istack,r0
+ #else
  	mov.l	#__kernel_istkpt,r5
  	mov.l	[r5], r0					; 割込み用のスタックへ切替え
+ #endif
  	mov.l	#__kernel_intnest, r5
  	mov.w	#1, [r5]					; 非タスクコンテキストに切換え
  .if	TIPM_LOCK <> -15
***************
*** 421,428 ****
  	mov.l	#__kernel_lock_flag, r5		; CPUロック解除状態へ
  	mov.l	#0, [r5]
  .endif
! 	mov.l	#__kernel_istkpt, r5
  	mov.l	[r5], r0					; 割込み用のスタックへ切替え
  	mov.l	#__kernel_intnest, r5
  	mov.w	#1, [r5]					; 非タスクコンテキストに切換え
  	bsr		__kernel_exit_kernel
--- 429,441 ----
  	mov.l	#__kernel_lock_flag, r5		; CPUロック解除状態へ
  	mov.l	#0, [r5]
  .endif
! #ifdef RENESAS_RX72N_BSP
!     mov.l   #_istack,r0
! #else
! 	mov.l	#__kernel_istkpt,r5
  	mov.l	[r5], r0					; 割込み用のスタックへ切替え
+ #endif
+ 
  	mov.l	#__kernel_intnest, r5
  	mov.w	#1, [r5]					; 非タスクコンテキストに切換え
  	bsr		__kernel_exit_kernel
***************
*** 589,596 ****
  	bnz		interrupt_from_int			; 加算前が0でなければ多重割込み
  						; 初段の割込み
  	mov.l	r0, r3						; スタックポインタを取り出し
! 	mov.l	#__kernel_istkpt, r5		; 割込み用のスタックへ切替える
! 	mov.l	[r5], r0
  	push.l	r3							; タスクスタックを保持
  interrupt_from_int:		; 多重割込み
  	setpsw	i							; 割込み許可(CPUロック解除状態)
--- 602,614 ----
  	bnz		interrupt_from_int			; 加算前が0でなければ多重割込み
  						; 初段の割込み
  	mov.l	r0, r3						; スタックポインタを取り出し
! #ifdef RENESAS_RX72N_BSP
!     mov.l   #_istack,r0
! #else
! 	mov.l	#__kernel_istkpt,r5
! 	mov.l	[r5], r0					; 割込み用のスタックへ切替え
! #endif
! 
  	push.l	r3							; タスクスタックを保持
  interrupt_from_int:		; 多重割込み
  	setpsw	i							; 割込み許可(CPUロック解除状態)
***************
*** 753,760 ****
  	cmp		#1, r4						; 多重割り込みかどうか
  	bnz		exception_from_int			; 加算前が0でなければ多重割込み
  						; 初段の割込み
! 	mov.l	#__kernel_istkpt, r5		; 割込み用のスタックへ切替える
! 	mov.l	[r5], r0
  	push.l	r3							; タスクスタックを保持
  exception_from_int:		; 多重割込み
  	mov.l	EXC_GET_PSW_OFFSET[r3], r5
--- 771,783 ----
  	cmp		#1, r4						; 多重割り込みかどうか
  	bnz		exception_from_int			; 加算前が0でなければ多重割込み
  						; 初段の割込み
! #ifdef RENESAS_RX72N_BSP
!     mov.l   #_istack,r0
! #else
! 	mov.l	#__kernel_istkpt,r5
! 	mov.l	[r5], r0					; 割込み用のスタックへ切替え
! #endif
! 
  	push.l	r3							; タスクスタックを保持
  exception_from_int:		; 多重割込み
  	mov.l	EXC_GET_PSW_OFFSET[r3], r5
***************
*** 802,809 ****
  	cmp		#1, r4						; 多重割り込みかどうか
  	bnz		exception_from_nonkernelint	; 加算前が0でなければ多重割込み
  						; 初段の割込み
! 	mov.l	#__kernel_istkpt, r5		; 割込み用のスタックへ切替える
! 	mov.l	[r5], r0
  	push.l	r3							; タスクスタックを保持
  exception_from_nonkernelint:	; 多重割込み
  	mov.l	EXC_GET_PSW_OFFSET[r3], r5
--- 825,837 ----
  	cmp		#1, r4						; 多重割り込みかどうか
  	bnz		exception_from_nonkernelint	; 加算前が0でなければ多重割込み
  						; 初段の割込み
! #ifdef RENESAS_RX72N_BSP
!     mov.l   #_istack,r0
! #else
! 	mov.l	#__kernel_istkpt,r5
! 	mov.l	[r5], r0					; 割込み用のスタックへ切替え
! #endif
! 
  	push.l	r3							; タスクスタックを保持
  exception_from_nonkernelint:	; 多重割込み
  	mov.l	EXC_GET_PSW_OFFSET[r3], r5
diff -cr --new-file asp/arch/rx_gcc/rx_common/prc_unrename.h 1.9.1_update/arch/rx_gcc/rx_common/prc_unrename.h
*** asp/arch/rx_gcc/rx_common/prc_unrename.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/arch/rx_gcc/rx_common/prc_unrename.h	Fri Dec 23 09:35:57 2022
***************
*** 9,14 ****
--- 9,16 ----
  #undef intnest
  #undef lock_flag
  #undef saved_ipl
+ #undef saved_psw
+ 
  #undef prc_initialize
  #undef prc_terminate
  #undef x_config_int
***************
*** 47,52 ****
--- 49,56 ----
  #undef _intnest
  #undef _lock_flag
  #undef _saved_ipl
+ #undef _saved_psw
+ 
  #undef _prc_initialize
  #undef _prc_terminate
  #undef _x_config_int
diff -cr --new-file asp/target/rx72n_gcc/MANIFEST 1.9.1_update/target/rx72n_gcc/MANIFEST
*** asp/target/rx72n_gcc/MANIFEST	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/MANIFEST	Tue Dec 13 14:29:08 2022
***************
*** 19,27 ****
  target_kernel.h
  target_rename.def
  target_rename.h
- target_serial.c
- target_serial.cfg
- target_serial.h
  target_sil.h
  target_stddef.h
  target_support.src
--- 19,24 ----
diff -cr --new-file asp/target/rx72n_gcc/Makefile.target 1.9.1_update/target/rx72n_gcc/Makefile.target
*** asp/target/rx72n_gcc/Makefile.target	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/Makefile.target	Tue Dec 13 14:29:08 2022
***************
*** 5,12 ****
  #
  #  ボード名，プロセッサ名，開発環境名の定義
  #
! BOARD = GR-SAKURA
! PRC = rx63n
  TOOL = gcc
  
  # gcc target prefix
--- 5,12 ----
  #
  #  ボード名，プロセッサ名，開発環境名の定義
  #
! BOARD = RX72N
! PRC = rx72n
  TOOL = gcc
  
  # gcc target prefix
***************
*** 25,54 ****
  #  Driver Setting
  #
  
- include $(TARGETDIR)/target_device/Makefile.target_device
- 
  DRIVERDIR = $(SRCDIR)/driver/rx_gcc
  
- include $(DRIVERDIR)/Makefile_rx63n.driver
- 
- #
- # Middleware Setting
- #
- 
- include $(SRCDIR)/middleware/Makefile.middleware
  
  #
  #  カーネルに関する定義
  #
  KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR) $(DRIVERDIR)
  KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) target_support.o
! KERNEL_COBJS := $(KERNEL_COBJS) target_config.o target_timer.o $(DRIVER_COBJS)
  
- #
- #  システムサービスに関する定義
- #
- SYSSVC_DIR := $(SYSSVC_DIR)
- SYSSVC_COBJS := $(SYSSVC_COBJS) target_serial.o tinet_target_config.o
  
  #
  #  コンフィギュレータ関係の変数の定義
--- 25,40 ----
  #  Driver Setting
  #
  
  DRIVERDIR = $(SRCDIR)/driver/rx_gcc
  
  
  #
  #  カーネルに関する定義
  #
  KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR) $(DRIVERDIR)
  KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) target_support.o
! KERNEL_COBJS := $(KERNEL_COBJS)  target_config.o target_timer.o target_edmac.o dummy.o$(DRIVER_COBJS)
  
  
  #
  #  コンフィギュレータ関係の変数の定義
***************
*** 64,70 ****
  #
  #  リンカスクリプトの定義
  #
! LDSCRIPT = $(TARGETDIR)/sakura_gcc.ld
  
  #
  #  スタートアップモジュールに関する定義
--- 50,56 ----
  #
  #  リンカスクリプトの定義
  #
! LDSCRIPT = $(TARGETDIR)/rx72n_gcc.ld
  
  #
  #  スタートアップモジュールに関する定義
***************
*** 87,93 ****
  LIBS := $(LIBS) -lgcc
  
  
! CFG_ASMOBJS := $(CFG_ASMOBJS) kernel_cfg_asm.o sectrx.o DTCa_vecter.o
  
  #
  #  依存関係の定義
--- 73,79 ----
  LIBS := $(LIBS) -lgcc
  
  
! CFG_ASMOBJS := $(CFG_ASMOBJS) kernel_cfg_asm.o  sectrx.o
  
  #
  #  依存関係の定義
***************
*** 99,102 ****
  #
  #  プロセッサ依存部のインクルード
  #
! include $(SRCDIR)/arch/rx_$(TOOL)/$(PRC)/Makefile.prc
--- 85,88 ----
  #
  #  プロセッサ依存部のインクルード
  #
! include $(SRCDIR)/arch/rx_$(TOOL)/$(PRC)/Makefile.prc 
diff -cr --new-file asp/target/rx72n_gcc/dummy.c 1.9.1_update/target/rx72n_gcc/dummy.c
*** asp/target/rx72n_gcc/dummy.c	Thu Jan  1 09:00:00 1970
--- 1.9.1_update/target/rx72n_gcc/dummy.c	Mon Dec 26 14:58:46 2022
***************
*** 0 ****
--- 1,58 ----
+ /*
+  *  TOPPERS/ASP Kernel
+  *      Toyohashi Open Platform for Embedded Real-Time Systems/
+  *      Advanced Standard Profile Kernel
+  * 
+  *  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
+  *                              Toyohashi Univ. of Technology, JAPAN
+  *  Copyright (C) 2004-2012 by Embedded and Real-Time Systems Laboratory
+  *              Graduate School of Information Science, Nagoya Univ., JAPAN
+  *  Copyright (C) 2022 Akinori Watanabe, JAPAN
+  *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
+  *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
+  *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
+  *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
+  *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
+  *      スコード中に含まれていること．
+  *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
+  *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
+  *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
+  *      の無保証規定を掲載すること．
+  *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
+  *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
+  *      と．
+  *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
+  *        作権表示，この利用条件および下記の無保証規定を掲載すること．
+  *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
+  *        報告すること．
+  *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
+  *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
+  *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
+  *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
+  *      免責すること．
+  * 
+  *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
+  *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
+  *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
+  *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
+  *  の責任を負わない．
+  * 
+  */
+ 
+ #include "kernel.h"
+ 
+  STK_T *const	istack;
+ 
+  void ether_int_Wrapper() {
+ 
+  }
+  void taskDemoWolf(intptr_t exinf) {
+ }
+  void taskNetWork(intptr_t exinf) {
+  }
+  void taskEther(intptr_t exinf) {
+ }
+  void timer_int_Wrapper() {
+  }
+  void timer_cm2_int_Wrapper() {
+   }
diff -cr --new-file asp/target/rx72n_gcc/rx72n_gcc.ld 1.9.1_update/target/rx72n_gcc/rx72n_gcc.ld
*** asp/target/rx72n_gcc/rx72n_gcc.ld	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/rx72n_gcc.ld	Tue Dec 13 14:29:09 2022
***************
*** 1,7 ****
  MEMORY
  {
!     FLASH (rx) : ORIGIN = 0xFFF00000, LENGTH = 1024K
!     SRAM (rwx) : ORIGIN = 0x00000000, LENGTH = 64K
  }
  
  PROVIDE(hardware_init_hook = 0);
--- 1,9 ----
  MEMORY
  {
! 	RAM : ORIGIN = 0x4, LENGTH = 0x7fffc
! 	RAM2 : ORIGIN = 0x00800000, LENGTH = 524288
! 	ROM : ORIGIN = 0xFFE00000, LENGTH = 2097152
! 
  }
  
  PROVIDE(hardware_init_hook = 0);
***************
*** 19,25 ****
  		*(.text)
  		*(.text.*)
  		*(P)
! 	} > FLASH
  	_etext = .;
  	PROVIDE(etext = .);
  
--- 21,27 ----
  		*(.text)
  		*(.text.*)
  		*(P)
! 	} > ROM
  	_etext = .;
  	PROVIDE(etext = .);
  
***************
*** 31,42 ****
  		*(C_2)
  		*(C)
  		*(C$VECT)
! 	} > FLASH
      __rodata_end = .;
  	__exidx_start = .;
  	__exidx_end = .;
  
! 	. = 0x0; /*SRAM START ADDRES*/
  	.bss : 
  	{
  		__bss_start  = .;
--- 33,44 ----
  		*(C_2)
  		*(C)
  		*(C$VECT)
! 	} > ROM
      __rodata_end = .;
  	__exidx_start = .;
  	__exidx_end = .;
  
! 	. = 0x0; /*RAM START ADDRES*/
  	.bss : 
  	{
  		__bss_start  = .;
***************
*** 50,56 ****
  		*(B_2)
  		*(SI) /* SI is kernel stack section*/
  	    __bss_end = .;
! 	} > SRAM
  
      . = __rodata_end;
  	. = ALIGN(4);
--- 52,58 ----
  		*(B_2)
  		*(SI) /* SI is kernel stack section*/
  	    __bss_end = .;
! 	} > RAM
  
      . = __rodata_end;
  	. = ALIGN(4);
***************
*** 64,70 ****
  		*(D_1)
  		*(D_2)
  	    __data_end = .;
! 	} > SRAM AT> FLASH
      
  	__idata_end = __idata_start + SIZEOF(.data);
  	_edata = .;
--- 66,72 ----
  		*(D_1)
  		*(D_2)
  	    __data_end = .;
! 	} > RAM AT> ROM
      
  	__idata_end = __idata_start + SIZEOF(.data);
  	_edata = .;
***************
*** 74,80 ****
      .fvectors 0xFFFFFF80 :
     {
        *(.fvect)
!     } > FLASH
  	_end = .;
  	PROVIDE(end = .);
  }
--- 76,82 ----
      .fvectors 0xFFFFFF80 :
     {
        *(.fvect)
!     } > ROM
  	_end = .;
  	PROVIDE(end = .);
  }
diff -cr --new-file asp/target/rx72n_gcc/sectrx.S 1.9.1_update/target/rx72n_gcc/sectrx.S
*** asp/target/rx72n_gcc/sectrx.S	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/sectrx.S	Tue Dec 13 14:29:09 2022
***************
*** 48,54 ****
  	.balign 4
  	.glb _DEFAULT_ISTACK
  _DEFAULT_ISTACK:
! 	.blkb		0x0500
  	.glb DEFAULT_ISTACK_TOP
  DEFAULT_ISTACK_TOP:
  
--- 48,54 ----
  	.balign 4
  	.glb _DEFAULT_ISTACK
  _DEFAULT_ISTACK:
! 	.blkb		0x10000
  	.glb DEFAULT_ISTACK_TOP
  DEFAULT_ISTACK_TOP:
  
diff -cr --new-file asp/target/rx72n_gcc/target.tf 1.9.1_update/target/rx72n_gcc/target.tf
*** asp/target/rx72n_gcc/target.tf	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target.tf	Tue Dec 13 14:29:09 2022
***************
*** 37,48 ****
  $ 
  
  $ 
! $  ターゲット依存テンプレート（GR-SAKURA用）
  $ 
  
  
  /*$NL$
! $SPC$*  Target-dependent Definitions (GR-SAKURA)$NL$
  $SPC$*/$NL$
  $NL$
  
--- 37,48 ----
  $ 
  
  $ 
! $  ターゲット依存テンプレート（RX72N用）
  $ 
  
  
  /*$NL$
! $SPC$*  Target-dependent Definitions (RX72N)$NL$
  $SPC$*/$NL$
  $NL$
  
***************
*** 50,56 ****
  
  
  $ 
! $  RX63n依存部の読み込み
  $ 
! $INCLUDE "rx_gcc/rx63n/rx63n.tf"$
  
--- 50,56 ----
  
  
  $ 
! $  RX72n依存部の読み込み
  $ 
! $INCLUDE "rx_gcc/rx72n/rx72n.tf"$
  
diff -cr --new-file asp/target/rx72n_gcc/target_board.h 1.9.1_update/target/rx72n_gcc/target_board.h
*** asp/target/rx72n_gcc/target_board.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_board.h	Tue Dec 13 14:29:09 2022
***************
*** 41,74 ****
  /*
   *  MCU依存情報の読み込み
   */
! #include <rx63n.h>
  
- #ifndef TOPPERS_MACRO_ONLY
- #include "target_device/target_device.h"
- #endif
  
  #define F_PCLKA		96000000UL	/* PCLKA frequency (configured by SCKCR.PCK) */
  #define F_PCLKB		48000000UL	/* PCLKB frequency (configured by SCKCR.PCK) */
  
- /*
-  *  ボーレート設定
-  */
- // 9600 bps
- #define BAUD_9600BPS_F4		UINT_C( 38 )
- #define UART_BAUDRATE		BAUD_9600BPS_F4
- #define UART_CLKSRC			CLK_F4
- //38400 bps
- //#define BAUD_38400BPS_F1		UINT_C( 38 )
- //#define UART_BAUDRATE		BAUD_38400BPS_F1
- //#define UART_CLKSRC			CLK_F1
- //57600 bps
- //#define BAUD_57600BPS_F1		UINT_C( 26 )
- //#define UART_BAUDRATE		BAUD_57600BPS_F1
- //#define UART_CLKSRC			CLK_F1
- //115200
- //#define BAUD_115200BPS_F1		UINT_C( 13 )
- //#define UART_BAUDRATE		BAUD_115200BPS_F1
- //#define UART_CLKSRC			CLK_F1
  
  #endif	/* TOPPERS_STARTER_KIT_H */
  
--- 41,53 ----
  /*
   *  MCU依存情報の読み込み
   */
! #include <rx72n.h>
! 
  
  
  #define F_PCLKA		96000000UL	/* PCLKA frequency (configured by SCKCR.PCK) */
  #define F_PCLKB		48000000UL	/* PCLKB frequency (configured by SCKCR.PCK) */
  
  
  #endif	/* TOPPERS_STARTER_KIT_H */
  
diff -cr --new-file asp/target/rx72n_gcc/target_check.tf 1.9.1_update/target/rx72n_gcc/target_check.tf
*** asp/target/rx72n_gcc/target_check.tf	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_check.tf	Tue Dec 13 14:29:09 2022
***************
*** 36,42 ****
  $ 
  
  $ 
! $     パス3のターゲット依存テンプレート（GR-SAKURA用）
  $ 
  
  $ 
--- 36,42 ----
  $ 
  
  $ 
! $     パス3のターゲット依存テンプレート（RX72N用）
  $ 
  
  $ 
diff -cr --new-file asp/target/rx72n_gcc/target_config.c 1.9.1_update/target/rx72n_gcc/target_config.c
*** asp/target/rx72n_gcc/target_config.c	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_config.c	Tue Dec 13 14:29:09 2022
***************
*** 36,109 ****
  
  
  /*
!  *	ターゲットシステム依存モジュール（GR-SAKURA用）
   */
  
  
  #include "kernel_impl.h"
  #include <sil.h>
  #include "target_board.h"
- #include <target_serial.h>
- #include <target_device/target_device.h>
  
  
- /*
-  *  ターゲットシステム依存 初期化ルーチン
-  */
- void
- sakura_clock_waitcount_config(void){
-   //unlock lopwermode register access
-   sil_wrh_mem((void *)(SYSTEM_PRCR_ADDR), SYSTEM_PRKEY | SYSTEM_PRC1);
- 
-   //clock wait count set
-   sil_wrb_mem((void *)(SYSTEM_MOSCWTR_ADDR),SYSTEM_CLKWAIT_HE );
-   sil_wrb_mem((void *)(SYSTEM_PLLWTCR_ADDR), SYSTEM_CLKWAIT_HA);
-   
-   //lock lopwermode register access
-   sil_wrh_mem((void *)(SYSTEM_PRCR_ADDR), SYSTEM_PRKEY );
- }
- 
- 
- void 
- sakura_clock_config( void ){
-   
-   sakura_clock_waitcount_config();
- 
-   //unlock access of clock setting register
-   sil_wrh_mem((void *)(SYSTEM_PRCR_ADDR), SYSTEM_PRKEY | SYSTEM_PRC0);
-   //GR-SAKURA Bord OSC is 12MHz
-   //set clock freq(PLL 196MHz, PCKB 48MHz PCKA 98MHz ICK 98MHz)
-   //pll set div 1, mul 16
-   sil_wrh_mem((void *)(CKG_PLLCR_ADDR), CKG_PLLCR_PLIDIV1 | CKG_PLLCR_STC16);
-   //set bus clock rate
-   sil_wrw_mem((void *)(CKG_SCKCR_ADDR),   CKG_SCKCR_PB_DIV04 
-                                         | CKG_SCKCR_PA_DIV02   
-                                         | CKG_SCKCR_BCK_DIV04
-                                         | CKG_SCKCR_PSTOP0
-                                         | CKG_SCKCR_PSTOP1
-                                         | CKG_SCKCR_FCK_DIV04
-                                         | CKG_SCKCR_ICK_DIV02
-                                         | CKG_SCKCR_RESERVE);
- 
-   sil_wrh_mem((void *)(CKG_SCKCR2_ADDR), CKG_SCKCR2_IEBCK_DIV4 | CKG_SCKCR2_UCK_NOT_USE);
- 
-   //Main clock enable
-    sil_wrb_mem((void *)(CKG_MOSCCR_ADDR), CKG_CLOCK_ENABLE);
-    //Wait Main clock lock
-    while(sil_reb_mem((void *)(CKG_MOSCCR_ADDR)) != CKG_CLOCK_ENABLE);
-    
-   //pll enable
-    sil_wrb_mem((void *)(CKG_PLLCR2_ADDR), CKG_CLOCK_ENABLE);
-    while(sil_reb_mem((void *)(CKG_PLLCR2_ADDR)) != CKG_CLOCK_ENABLE);
-    //PLL lock wait
-    //wait over 10ms, LOCO freq 125Khz, wait count is 125*10 = 1250;                               
-    //switch clock(PLL select)
-    sil_wrh_mem((void *)(CKG_SCKCR3_ADDR),   CKG_SCKCR3_PLL);                        
-   //lock access of clock setting register
-   sil_wrh_mem((void *)(SYSTEM_PRCR_ADDR), SYSTEM_PRKEY );
- 
- 
- }
  
  void
  target_initialize( void )
--- 36,50 ----
  
  
  /*
!  *	ターゲットシステム依存モジュール（RX72N用）
   */
  
  
  #include "kernel_impl.h"
  #include <sil.h>
  #include "target_board.h"
  
  
  
  void
  target_initialize( void )
***************
*** 114,122 ****
  	 */
  
    prc_initialize();
-   sakura_clock_config();
-   target_device_init();
-   std_uart_init(TARGET_PUTC_PORTID, UART_BAUDRATE, UART_CLKSRC); //9600 baudrate
  
  }
  
--- 55,60 ----
***************
*** 140,149 ****
  void
  target_fput_log( char c )
  {
- 	if( c == '\n' ){
- 	   sci_uart_pol_putc( '\r' , TARGET_PUTC_PORTID );
- 	}
  
-     sci_uart_pol_putc( c , TARGET_PUTC_PORTID );
  }
  
--- 78,83 ----
diff -cr --new-file asp/target/rx72n_gcc/target_config.h 1.9.1_update/target/rx72n_gcc/target_config.h
*** asp/target/rx72n_gcc/target_config.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_config.h	Mon Dec 26 14:56:53 2022
***************
*** 41,47 ****
   */
  
  /*
!  *		ターゲット依存モジュール（GR-SAKURA用）
   *
   *  カーネルのターゲット依存部のインクルードファイル．kernel_impl.hのター
   *  ゲット依存部の位置付けとなる．
--- 41,47 ----
   */
  
  /*
!  *		ターゲット依存モジュール（RX72N用）
   *
   *  カーネルのターゲット依存部のインクルードファイル．kernel_impl.hのター
   *  ゲット依存部の位置付けとなる．
***************
*** 68,74 ****
  extern uint32_t	DEFAULT_ISTACK[];
  #endif
  
! #define DEFAULT_ISTKSZ		( 0x500U )
  #define DEFAULT_ISTK		( (void *)&DEFAULT_ISTACK[0] )
  
  
--- 68,74 ----
  extern uint32_t	DEFAULT_ISTACK[];
  #endif
  
! #define DEFAULT_ISTKSZ		(0x1000U) 
  #define DEFAULT_ISTK		( (void *)&DEFAULT_ISTACK[0] )
  
  
***************
*** 96,104 ****
  
  
  /*
!  *  プロセッサ依存モジュール（RX63n用）
   */
! #include "rx63n_config.h"
  
  
  /*
--- 96,104 ----
  
  
  /*
!  *  プロセッサ依存モジュール（RX72n用）
   */
! #include "rx72n_config.h"
  
  
  /*
diff -cr --new-file asp/target/rx72n_gcc/target_edmac.c 1.9.1_update/target/rx72n_gcc/target_edmac.c
*** asp/target/rx72n_gcc/target_edmac.c	Thu Jan  1 09:00:00 1970
--- 1.9.1_update/target/rx72n_gcc/target_edmac.c	Mon Dec 26 14:50:41 2022
***************
*** 0 ****
--- 1,65 ----
+ /*
+  *  TOPPERS/ASP Kernel
+  *      Toyohashi Open Platform for Embedded Real-Time Systems/
+  *      Advanced Standard Profile Kernel
+  * 
+  *  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
+  *                              Toyohashi Univ. of Technology, JAPAN
+  *  Copyright (C) 2004-2012 by Embedded and Real-Time Systems Laboratory
+  *              Graduate School of Information Science, Nagoya Univ., JAPAN
+  *  Copyright (C) 2022 Akinori Watanabe, JAPAN
+  *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
+  *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
+  *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
+  *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
+  *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
+  *      スコード中に含まれていること．
+  *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
+  *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
+  *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
+  *      の無保証規定を掲載すること．
+  *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
+  *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
+  *      と．
+  *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
+  *        作権表示，この利用条件および下記の無保証規定を掲載すること．
+  *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
+  *        報告すること．
+  *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
+  *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
+  *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
+  *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
+  *      免責すること．
+  * 
+  *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
+  *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
+  *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
+  *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
+  *  の責任を負わない．
+  * 
+  */
+ 
+ #include "kernel_impl.h"
+ #include <sil.h>
+ #include "target_edmac.h"
+ 
+ extern void ether_int_Wrapper();
+ /*
+  *	ターゲットシステム依存モジュール（RX72N用 EDMAC Wrapper）
+  */
+ 
+ void
+ rx72n_edmac_interrput_wrapper(void){
+ 	i_begin_int(INTNO_EDMAC_0);
+ 
+ 	ether_int_Wrapper();
+ 
+ 	i_end_int(INTNO_EDMAC_0);
+ 
+ }
+ void
+ rx72n_edmac_interrput_wrapper_term(void){
+ 
+ }
+ 
+ 
diff -cr --new-file asp/target/rx72n_gcc/target_edmac.cfg 1.9.1_update/target/rx72n_gcc/target_edmac.cfg
*** asp/target/rx72n_gcc/target_edmac.cfg	Thu Jan  1 09:00:00 1970
--- 1.9.1_update/target/rx72n_gcc/target_edmac.cfg	Mon Dec 26 14:54:01 2022
***************
*** 0 ****
--- 1,8 ----
+ /*
+  *  EDMAC（RX72N用）のコンフィギュレーションファイル
+  */
+ 
+ #include "target_edmac.h"
+ DEF_INH(INHNO_EDMAC_0, { TA_NULL, rx72n_edmac_interrput_wrapper });
+ CFG_INT(INTNO_EDMAC_0, { INTATR_EDMAC_0, INTPRI_EDMAC_0 });
+ CRE_SEM(ETHER_START_SEM, {TA_TPRI, 0, 1 });
diff -cr --new-file asp/target/rx72n_gcc/target_edmac.h 1.9.1_update/target/rx72n_gcc/target_edmac.h
*** asp/target/rx72n_gcc/target_edmac.h	Thu Jan  1 09:00:00 1970
--- 1.9.1_update/target/rx72n_gcc/target_edmac.h	Mon Dec 26 14:52:25 2022
***************
*** 0 ****
--- 1,66 ----
+ /*
+  *  TOPPERS/ASP Kernel
+  *      Toyohashi Open Platform for Embedded Real-Time Systems/
+  *      Advanced Standard Profile Kernel
+  * 
+  *  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
+  *                              Toyohashi Univ. of Technology, JAPAN
+  *  Copyright (C) 2004-2012 by Embedded and Real-Time Systems Laboratory
+  *              Graduate School of Information Science, Nagoya Univ., JAPAN
+  *  Copyright (C) 2022 Akinori Watanabe, JAPAN
+  *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
+  *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
+  *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
+  *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
+  *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
+  *      スコード中に含まれていること．
+  *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
+  *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
+  *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
+  *      の無保証規定を掲載すること．
+  *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
+  *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
+  *      と．
+  *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
+  *        作権表示，この利用条件および下記の無保証規定を掲載すること．
+  *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
+  *        報告すること．
+  *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
+  *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
+  *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
+  *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
+  *      免責すること．
+  * 
+  *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
+  *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
+  *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
+  *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
+  *  の責任を負わない．
+  * 
+  */
+ 
+ /*
+  *		EDMACモジュール（RX72N用）
+  *
+  */
+ 
+ #ifndef TOPPERS_TARGET_72N_EDMAC_H
+ #define TOPPERS_TARGET_72N_EDMAC_H
+ #include <sil.h>
+ #include "target_board.h"
+ #include "prc_kernel.h"
+ 
+ //#define INTNO_EDMAC_0	113			/* 割込み番号 */
+ 
+ #define INHNO_EDMAC_0		INT_EDMAC0		/* 割込みハンドラ番号 */
+ #define INTNO_EDMAC_0		INT_EDMAC0		/* 割込み番号 */
+ #define INTPRI_EDMAC_0	-5					/* 割込み優先度 */
+ #define INTATR_EDMAC_0	TA_ENAINT | TA_EDGE	/* 割込み属性 */
+ #ifndef TOPPERS_MACRO_ONLY
+ 
+ extern void	rx72n_edmac_interrput_wrapper(void);
+ 
+ #endif
+ #endif /* TOPPERS_TARGET_72N_EDMAC_H */
+ 
+ 
diff -cr --new-file asp/target/rx72n_gcc/target_sil.h 1.9.1_update/target/rx72n_gcc/target_sil.h
*** asp/target/rx72n_gcc/target_sil.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_sil.h	Tue Dec 13 14:29:09 2022
***************
*** 36,42 ****
   */
  
  /*
!  *		sil.hのターゲット依存部（GR-SAKURA用）
   *
   *  このインクルードファイルは，sil.hの先頭でインクルードされる．他のファ
   *  イルからは直接インクルードすることはない．このファイルをインクルー
--- 36,42 ----
   */
  
  /*
!  *		sil.hのターゲット依存部（RX72N用）
   *
   *  このインクルードファイルは，sil.hの先頭でインクルードされる．他のファ
   *  イルからは直接インクルードすることはない．このファイルをインクルー
diff -cr --new-file asp/target/rx72n_gcc/target_syssvc.h 1.9.1_update/target/rx72n_gcc/target_syssvc.h
*** asp/target/rx72n_gcc/target_syssvc.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_syssvc.h	Tue Dec 13 14:29:09 2022
***************
*** 43,49 ****
   */
  
  /*
!  *		システムサービスのターゲット依存部（GR-SAKURA用）
   *
   *  システムサービスのターゲット依存部のインクルードファイル．このファ
   *  イルの内容は，コンポーネント記述ファイルに記述され，このファイルは
--- 43,49 ----
   */
  
  /*
!  *		システムサービスのターゲット依存部（RX72N用）
   *
   *  システムサービスのターゲット依存部のインクルードファイル．このファ
   *  イルの内容は，コンポーネント記述ファイルに記述され，このファイルは
***************
*** 77,83 ****
  /*
   *  起動メッセージのターゲットシステム名
   */
! #define	TARGET_NAME	"GR-SAKURA"
  
  
  /*
--- 77,83 ----
  /*
   *  起動メッセージのターゲットシステム名
   */
! #define	TARGET_NAME	"RX72N"
  
  
  /*
diff -cr --new-file asp/target/rx72n_gcc/target_timer.c 1.9.1_update/target/rx72n_gcc/target_timer.c
*** asp/target/rx72n_gcc/target_timer.c	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_timer.c	Tue Dec 13 14:29:09 2022
***************
*** 76,83 ****
     * カウントアップに用いられるクロック設定
     * PCLKB/8を選択
     */
!   *CMT0_CMCR_ADDR = CMT_PCLK_DIV_8;
! 
    /* 
     * コンペアマッチタイマカウンタ設定
     */
--- 76,83 ----
     * カウントアップに用いられるクロック設定
     * PCLKB/8を選択
     */
!  // *CMT0_CMCR_ADDR = CMT_PCLK_DIV_8;
!   *CMT0_CMCR_ADDR = (0x0001U);
    /* 
     * コンペアマッチタイマカウンタ設定
     */
***************
*** 86,92 ****
    /* 
     * コンペアマッチタイマ周期設定
     */
!   *CMT0_CMCOR_ADDR = CMCOR_PERIOD;
  
    /*
     *  タイマ動作開始前の割込み要求をクリア
--- 86,93 ----
    /* 
     * コンペアマッチタイマ周期設定
     */
!   /* CMT0 Toppers Setting 10msec  */
!   *CMT0_CMCOR_ADDR = RX72N_CMCOR ;// CMCOR_PERIOD ;// 18749;//CMCOR_PERIOD;
  
    /*
     *  タイマ動作開始前の割込み要求をクリア
***************
*** 96,109 ****
    /* 
     * コンペアマッチタイマ割り込みを許可
     */
!   *CMT0_CMCR_ADDR |= CMT0_CMCR_CMIE_BIT;
  
    /* 
     * タイマ動作開始
     */
    *CMT_CMSTR0_ADDR |= CMT_CMSTR0_STR0_BIT;
  }
! 
  /*
   *  タイマの停止処理
   */
--- 97,119 ----
    /* 
     * コンペアマッチタイマ割り込みを許可
     */
!    *CMT0_CMCR_ADDR |= CMT0_CMCR_CMIE_BIT;
  
    /* 
     * タイマ動作開始
     */
    *CMT_CMSTR0_ADDR |= CMT_CMSTR0_STR0_BIT;
  }
! void
! target_timer_cmt1_initialize(intptr_t exinf)
! {
! 	//to BSP initialize
! }
! void
! target_timer_cmt2_initialize(intptr_t exinf)
! {
! 	//to BSP initialize
! }
  /*
   *  タイマの停止処理
   */
***************
*** 115,120 ****
--- 125,140 ----
  	 */
  	*CMT_CMSTR0_ADDR &= ~CMT_CMSTR0_STR0_BIT;
  }
+ void
+ target_timer_cmt1_terminate(intptr_t exinf)
+ {
+  // renesas bsp
+ }
+ void
+ target_timer_cmt2_terminate(intptr_t exinf)
+ {
+ // renesas bsp
+ }
  
  /*
   *  タイマ割込みハンドラ
***************
*** 124,129 ****
  	i_begin_int(INTNO_TIMER);
  	
  	signal_time();				/* タイムティックの供給 */
- 	
  	i_end_int(INTNO_TIMER);
  }
--- 144,164 ----
  	i_begin_int(INTNO_TIMER);
  	
  	signal_time();				/* タイムティックの供給 */
  	i_end_int(INTNO_TIMER);
  }
+ void target_timer_cmt1_handler(void)
+ {
+ 	i_begin_int(INHNO_TIMER_CMT1);
+ 
+ 	signal_time();				/* タイムティックの供給 */
+ 	timer_int_Wrapper();
+ 	i_end_int(INHNO_TIMER_CMT1);
+ }
+ void target_timer_cmt2_handler(void)
+ {
+ 	i_begin_int(INHNO_TIMER_CMT2);
+ 
+ 	signal_time();				/* タイムティックの供給 */
+ 	timer_cm2_int_Wrapper();
+ 	i_end_int(INHNO_TIMER_CMT2);
+ }
diff -cr --new-file asp/target/rx72n_gcc/target_timer.cfg 1.9.1_update/target/rx72n_gcc/target_timer.cfg
*** asp/target/rx72n_gcc/target_timer.cfg	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_timer.cfg	Tue Dec 13 14:29:09 2022
***************
*** 1,5 ****
  /*
!  *  タイマドライバ（RX610用）のコンフィギュレーションファイル
   */
  
  #include "target_timer.h"
--- 1,5 ----
  /*
!  *  タイマドライバ（RX72N用）のコンフィギュレーションファイル
   */
  
  #include "target_timer.h"
***************
*** 7,9 ****
--- 7,19 ----
  ATT_TER({ TA_NULL, 0, target_timer_terminate });
  DEF_INH(INHNO_TIMER, { TA_NULL, target_timer_handler });
  CFG_INT(INTNO_TIMER, { INTATR_TIMER, INTPRI_TIMER });
+ 
+ ATT_INI({ TA_NULL, 0, target_timer_cmt1_initialize });
+ ATT_TER({ TA_NULL, 0, target_timer_cmt1_terminate });
+ DEF_INH(INHNO_TIMER_CMT1, { TA_NULL, target_timer_cmt1_handler });
+ CFG_INT(INTNO_TIMER_CMT1, { INTATR_TIMER, INTPRI_TIMER });
+ 
+ ATT_INI({ TA_NULL, 0, target_timer_cmt2_initialize });
+ ATT_TER({ TA_NULL, 0, target_timer_cmt2_terminate });
+ DEF_INH(INHNO_TIMER_CMT2, { TA_NULL, target_timer_cmt2_handler });
+ CFG_INT(INTNO_TIMER_CMT2, { INTATR_TIMER, INTPRI_TIMER });
diff -cr --new-file asp/target/rx72n_gcc/target_timer.h 1.9.1_update/target/rx72n_gcc/target_timer.h
*** asp/target/rx72n_gcc/target_timer.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/target/rx72n_gcc/target_timer.h	Tue Dec 13 14:29:09 2022
***************
*** 44,50 ****
   */
  
  /*
!  *		タイマドライバ（GR-SAKURA  for RX63n 用）
   */
   
  #ifndef TOPPERS_TARGET_TIMER_H
--- 44,50 ----
   */
  
  /*
!  *		タイマドライバ（RX72n 用）
   */
   
  #ifndef TOPPERS_TARGET_TIMER_H
***************
*** 59,64 ****
--- 59,69 ----
   */
  #define INHNO_TIMER		INT_CMT0_CMI0		/* 割込みハンドラ番号 */
  #define INTNO_TIMER		INT_CMT0_CMI0		/* 割込み番号 */
+ #define INHNO_TIMER_CMT1		INT_CMT1_CMI1		/* 割込みハンドラ番号 */
+ #define INTNO_TIMER_CMT1		INT_CMT1_CMI1		/* 割込み番号 */
+ #define INHNO_TIMER_CMT2		INT_CMT2_CMI2		/* 割込みハンドラ番号 */
+ #define INTNO_TIMER_CMT2		INT_CMT2_CMI2		/* 割込み番号 */
+ 
  #define INTPRI_TIMER	-5					/* 割込み優先度 */
  #define INTATR_TIMER	TA_ENAINT | TA_EDGE	/* 割込み属性 */
  
***************
*** 78,83 ****
--- 83,93 ----
  #define TO_CLOCK(nume, deno)	((CLOCK)(TIMER_CLOCK * (nume) / (deno)))
  #define	TO_USEC(clock)			((SYSUTM)((clock) * 1000U / TIMER_CLOCK))
  
+ #define RX72N_PCLK 				(60000000) // Renesas BSP Setting PCLK
+ #define RX72N_PCLK_CKS 			(32) // Renesas BSP Setting PCLK CKS
+ #define RX72N_PCLK_DIV 			(100) // divide value (10msec)
+ 
+ #define RX72N_CMCOR			    ((unsigned short)(RX72N_PCLK / RX72N_PCLK_CKS / RX72N_PCLK_DIV) - 1)
  /*
   *  設定できる最大のタイマ周期（単位は内部表現）
   */
***************
*** 118,123 ****
--- 128,138 ----
  #define ICU_ISEL_CPU			(0x00U)
  
  
+ /*
+  *	ターゲットシステム依存モジュール（RX72N用 Timer (CMT0) Interrupt Wrapper）
+  */
+ 
+ extern void timer_int_Wrapper();
  
  
  /*
***************
*** 126,131 ****
--- 141,148 ----
   *  タイマを初期化し，周期的なタイマ割込み要求を発生させる．
   */
  extern void	target_timer_initialize(intptr_t exinf);
+ extern void	target_timer_cmt1_initialize(intptr_t exinf);
+ extern void	target_timer_cmt2_initialize(intptr_t exinf);
  
  /*
   *  タイマの停止処理
***************
*** 133,143 ****
   *  タイマの動作を停止させる．
   */
  extern void	target_timer_terminate(intptr_t exinf);
  
  /*
   *  タイマレジスタ値の読み出し
   */
! Inline uint16_t rx600_cmt_getcount(void)
  {
  	return *CMT0_CMCNT_ADDR;
  }
--- 150,162 ----
   *  タイマの動作を停止させる．
   */
  extern void	target_timer_terminate(intptr_t exinf);
+ extern void	target_timer_cmt1_terminate(intptr_t exinf);
+ extern void	target_timer_cmt2_terminate(intptr_t exinf);
  
  /*
   *  タイマレジスタ値の読み出し
   */
! Inline uint16_t rx72n_cmt_getcount(void)
  {
  	return *CMT0_CMCNT_ADDR;
  }
***************
*** 145,151 ****
  /*
   *  タイマレジスタ値の書き込み
   */
! Inline void rx600_cmt_setcount(uint16_t count)
  {
  	*CMT0_CMCNT_ADDR = count;
  }
--- 164,170 ----
  /*
   *  タイマレジスタ値の書き込み
   */
! Inline void rx72n_cmt_setcount(uint16_t count)
  {
  	*CMT0_CMCNT_ADDR = count;
  }
***************
*** 157,163 ****
  target_timer_get_current(void)
  {
  	/* アップカウントのためタイマレジスタ値をそのまま返す	*/
! 	return (rx600_cmt_getcount());
  }
  
  /*
--- 176,182 ----
  target_timer_get_current(void)
  {
  	/* アップカウントのためタイマレジスタ値をそのまま返す	*/
! 	return (rx72n_cmt_getcount());
  }
  
  /*
***************
*** 173,178 ****
--- 192,199 ----
   *  タイマ割込みハンドラ
   */
  extern void	target_timer_handler(void);
+ extern void	target_timer_cm1_handler(void);
+ extern void	target_timer_cm2_handler(void);
  
  #endif /* TOPPERS_MACRO_ONLY */
  #endif /* TOPPERS_TARGET_TIMER_H */
diff -cr --new-file asp/sample/Makefile 1.9.1_update/sample/Makefile
*** asp/sample/Makefile	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/sample/Makefile	Tue Dec 13 14:29:08 2022
***************
*** 136,142 ****
  #
  #  共通コンパイルオプションの定義
  #
! COPTS := $(COPTS) -g @(COPTS)
  ifndef OMIT_WARNING_ALL
    COPTS := $(COPTS) -Wall
  endif
--- 136,142 ----
  #
  #  共通コンパイルオプションの定義
  #
! COPTS := $(COPTS)  -g @(COPTS)
  ifndef OMIT_WARNING_ALL
    COPTS := $(COPTS) -Wall
  endif
***************
*** 177,183 ****
  #
  SYSSVC_DIR := $(SYSSVC_DIR) $(SRCDIR)/syssvc $(SRCDIR)/library
  SYSSVC_ASMOBJS := $(SYSSVC_ASMOBJS)
! SYSSVC_COBJS := $(SYSSVC_COBJS) banner.o syslog.o serial.o logtask.o \
  				@(SYSSVCOBJS) $(CXXRTS)
  SYSSVC_CFLAGS := $(SYSSVC_CFLAGS)
  SYSSVC_LIBS := $(SYSSVC_LIBS)
--- 177,183 ----
  #
  SYSSVC_DIR := $(SYSSVC_DIR) $(SRCDIR)/syssvc $(SRCDIR)/library
  SYSSVC_ASMOBJS := $(SYSSVC_ASMOBJS)
! SYSSVC_COBJS := $(SYSSVC_COBJS) banner.o syslog.o logtask.o \
  				@(SYSSVCOBJS) $(CXXRTS)
  SYSSVC_CFLAGS := $(SYSSVC_CFLAGS)
  SYSSVC_LIBS := $(SYSSVC_LIBS)
***************
*** 324,334 ****
  #
  #  全体のリンク
  #
! $(OBJFILE): $(APPL_CFG) kernel_cfg.timestamp $(ALL_OBJS) $(LIBS_DEP)
! 	$(LINK) $(CFLAGS) $(LDFLAGS) -o $(OBJFILE) $(START_OBJS) \
  			$(APPL_OBJS) $(SYSSVC_OBJS) $(CFG_OBJS) $(ALL_LIBS) $(END_OBJS)
! 	$(NM) -n $(OBJFILE) > $(OBJNAME).syms
! 	$(OBJCOPY) -O srec -S $(OBJFILE) $(OBJNAME).srec
  	$(CFG) --pass 3 --kernel asp $(INCLUDES) \
  				--rom-image $(OBJNAME).srec --symbol-table $(OBJNAME).syms \
  				-T $(TARGETDIR)/target_check.tf $(CFG_TABS) $<
--- 324,342 ----
  #
  #  全体のリンク
  #
! $(OBJFILE): $(APPL_CFG) kernel_cfg.timestamp $(ALL_OBJS) $(LIBS_DEP) 
! 	
! 	$(LINK) $(CFLAGS) $(LDFLAGS) -o '${C_PROJECT}'/toppers_rx/$(OBJFILE) $(START_OBJS) \
  			$(APPL_OBJS) $(SYSSVC_OBJS) $(CFG_OBJS) $(ALL_LIBS) $(END_OBJS)
! 	
! 		rm -f '${C_PROJECT}'/toppers_rx/libasp.a
! 		
! 	$(AR) -rcs '${C_PROJECT}'/toppers_rx/libasp.a $(ALL_OBJS) $(KERNEL_LIB_OBJS)
! 	$(AR) -d  '${C_PROJECT}'/toppers_rx/libasp.a dummy.o 				
! 	$(NM) -n '${C_PROJECT}'/toppers_rx/$(OBJFILE) > $(OBJNAME).syms
! 	
! 	$(OBJCOPY) -O srec -S '${C_PROJECT}'/toppers_rx/$(OBJFILE) $(OBJNAME).srec
! 	
  	$(CFG) --pass 3 --kernel asp $(INCLUDES) \
  				--rom-image $(OBJNAME).srec --symbol-table $(OBJNAME).syms \
  				-T $(TARGETDIR)/target_check.tf $(CFG_TABS) $<
***************
*** 337,358 ****
  #  バイナリファイルの生成
  #
  $(OBJNAME).bin: $(OBJFILE)
! 	$(OBJCOPY) -O binary -S $(OBJFILE) $(OBJNAME).bin
  
  #
  #  Sレコードファイルの生成
  #
  $(OBJNAME).srec: $(OBJFILE)
! 	$(OBJCOPY) -O srec -S $(OBJFILE) $(OBJNAME).srec
  
  #
  #  コンパイル結果の消去
  #
  .PHONY: clean
  clean:
! 	rm -f \#* *~ *.o $(CLEAN_FILES)
! 	rm -f $(OBJFILE) $(OBJNAME).syms $(OBJNAME).srec $(OBJNAME).bin
  	rm -f kernel_cfg.timestamp $(CFG2_OUT_SRCS)
  	rm -f cfg1_out.c $(CFG1_OUT) cfg1_out.syms cfg1_out.srec
  ifndef KERNEL_LIB
  	rm -f libkernel.a
--- 345,367 ----
  #  バイナリファイルの生成
  #
  $(OBJNAME).bin: $(OBJFILE)
! 	$(OBJCOPY) -O binary -S '${C_PROJECT}'/toppers_rx/$(OBJFILE) $(OBJNAME).bin
  
  #
  #  Sレコードファイルの生成
  #
  $(OBJNAME).srec: $(OBJFILE)
! 	$(OBJCOPY) -O srec -S '${C_PROJECT}'/toppers_rx/$(OBJFILE) $(OBJNAME).srec
  
  #
  #  コンパイル結果の消去
  #
  .PHONY: clean
  clean:
! 	rm -f \#* *~ *.o ../*.o $(CLEAN_FILES)
! 	rm -f '${C_PROJECT}'/toppers_rx/$(OBJFILE) $(OBJNAME).syms $(OBJNAME).srec $(OBJNAME).bin
  	rm -f kernel_cfg.timestamp $(CFG2_OUT_SRCS)
+ 	rm -f ${C_PROJECT}'/toppers_rx/$(OBJFILE)/libasp.a
  	rm -f cfg1_out.c $(CFG1_OUT) cfg1_out.syms cfg1_out.srec
  ifndef KERNEL_LIB
  	rm -f libkernel.a
diff -cr --new-file asp/sample/Makefile.bak 1.9.1_update/sample/Makefile.bak
*** asp/sample/Makefile.bak	Thu Jan  1 09:00:00 1970
--- 1.9.1_update/sample/Makefile.bak	Tue Dec 13 14:29:08 2022
***************
*** 0 ****
--- 1,578 ----
+ #
+ #  TOPPERS/ASP Kernel
+ #      Toyohashi Open Platform for Embedded Real-Time Systems/
+ #      Advanced Standard Profile Kernel
+ # 
+ #  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
+ #                              Toyohashi Univ. of Technology, JAPAN
+ #  Copyright (C) 2006-2014 by Embedded and Real-Time Systems Laboratory
+ #              Graduate School of Information Science, Nagoya Univ., JAPAN
+ # 
+ #  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
+ #  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
+ #  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
+ #  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
+ #      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
+ #      スコード中に含まれていること．
+ #  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
+ #      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
+ #      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
+ #      の無保証規定を掲載すること．
+ #  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
+ #      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
+ #      と．
+ #    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
+ #        作権表示，この利用条件および下記の無保証規定を掲載すること．
+ #    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
+ #        報告すること．
+ #  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
+ #      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
+ #      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
+ #      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
+ #      免責すること．
+ # 
+ #  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
+ #  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
+ #  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
+ #  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
+ #  の責任を負わない．
+ # 
+ #  $Id: Makefile 2594 2014-01-02 07:08:54Z ertl-hiro $
+ # 
+ 
+ #
+ #  ターゲットの指定（Makefile.targetで上書きされるのを防ぐため）
+ #
+ all:
+ 
+ #
+ #  ターゲット略称の定義
+ #
+ TARGET = @(TARGET)
+ 
+ #
+ #  プログラミング言語の定義
+ #
+ SRCLANG = @(SRCLANG)
+ ifeq ($(SRCLANG),c)
+   LIBS = -lc
+ endif
+ ifeq ($(SRCLANG),c++)
+   USE_CXX = true
+   CXXLIBS = -lstdc++ -lm -lc
+   CXXRTS = cxxrt.o newlibrt.o
+ endif
+ 
+ #
+ #  ソースファイルのディレクトリの定義
+ #
+ SRCDIR = @(SRCDIR)
+ 
+ #
+ #  オブジェクトファイル名の拡張子の設定
+ #
+ OBJEXT = @(OBJEXT)
+ 
+ #
+ #  実行環境の定義（ターゲット依存に上書きされる場合がある）
+ #
+ DBGENV := @(DBGENV)
+ 
+ #
+ #  カーネルライブラリ（libkernel.a）のディレクトリ名
+ #  （カーネルライブラリもmake対象にする時は，空に定義する）
+ #
+ KERNEL_LIB = @(KERNEL_LIB)
+ 
+ #
+ #  カーネルを関数単位でコンパイルするかどうかの定義
+ #
+ KERNEL_FUNCOBJS = @(KERNEL_FUNCOBJS)
+ 
+ #
+ #  トレースログを取得するかどうかの定義
+ #
+ ENABLE_TRACE = @(ENABLE_TRACE)
+ 
+ #
+ #  ユーティリティプログラムの名称
+ #
+ PERL = @(PERL)
+ CFG = @(CFG)
+ 
+ #
+ #  オブジェクトファイル名の定義
+ #
+ OBJNAME = asp
+ ifdef OBJEXT
+   OBJFILE = $(OBJNAME).$(OBJEXT)
+   CFG1_OUT = cfg1_out.$(OBJEXT)
+ else
+   OBJFILE = $(OBJNAME)
+   CFG1_OUT = cfg1_out
+ endif
+ 
+ #
+ #  ターゲット依存部のディレクトリの定義
+ #
+ TARGETDIR = $(SRCDIR)/target/$(TARGET)
+ 
+ #
+ #  ターゲット依存の定義のインクルード
+ #
+ include $(TARGETDIR)/Makefile.target
+ 
+ #
+ #  コンフィギュレータ関係の変数の定義
+ #
+ CFG_TABS := --api-table $(SRCDIR)/kernel/kernel_api.csv \
+ 			--cfg1-def-table $(SRCDIR)/kernel/kernel_def.csv $(CFG_TABS)
+ 
+ CFG_ASMOBJS := $(CFG_ASMOBJS)
+ CFG_COBJS := kernel_cfg.o $(CFG_COBJS)
+ CFG_OBJS := $(CFG_ASMOBJS) $(CFG_COBJS)
+ CFG2_OUT_SRCS := kernel_cfg.h kernel_cfg.c $(CFG2_OUT_SRCS)
+ 
+ #
+ #  共通コンパイルオプションの定義
+ #
+ COPTS := $(COPTS)  -g @(COPTS)
+ ifndef OMIT_WARNING_ALL
+   COPTS := $(COPTS) -Wall
+ endif
+ ifndef OMIT_OPTIMIZATION
+   COPTS := $(COPTS) -O2
+ endif
+ CDEFS := $(CDEFS) @(CDEFS)
+ INCLUDES := -I. -I$(SRCDIR)/include -I$(SRCDIR)/arch -I$(SRCDIR) $(INCLUDES)
+ LDFLAGS := $(LDFLAGS) @(LDFLAGS)
+ CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) @(LDFLAGS)
+ LIBS := $(LIBS) $(CXXLIBS)
+ CFLAGS = $(COPTS) $(CDEFS) $(INCLUDES)
+ 
+ #
+ #  アプリケーションプログラムに関する定義
+ #
+ APPLNAME = @(APPLNAME)
+ APPLDIR = @(APPLDIR)
+ APPL_CFG = $(APPLNAME).cfg
+ 
+ APPL_DIR = $(APPLDIR) $(SRCDIR)/library
+ APPL_ASMOBJS =
+ ifdef USE_CXX
+   APPL_CXXOBJS = $(APPLNAME).o @(APPLOBJS)
+   APPL_COBJS =
+ else
+   APPL_COBJS = $(APPLNAME).o @(APPLOBJS)
+ endif
+ APPL_COBJS := $(APPL_COBJS) log_output.o vasyslog.o t_perror.o strerror.o
+ APPL_CFLAGS =
+ APPL_LIBS =
+ ifdef APPLDIR
+   INCLUDES := $(INCLUDES) $(foreach dir,$(APPLDIR),-I$(dir))
+ endif
+ 
+ #
+ #  システムサービスに関する定義
+ #
+ SYSSVC_DIR := $(SYSSVC_DIR) $(SRCDIR)/syssvc $(SRCDIR)/library
+ SYSSVC_ASMOBJS := $(SYSSVC_ASMOBJS)
+ SYSSVC_COBJS := $(SYSSVC_COBJS) banner.o syslog.o logtask.o \
+ 				@(SYSSVCOBJS) $(CXXRTS)
+ SYSSVC_CFLAGS := $(SYSSVC_CFLAGS)
+ SYSSVC_LIBS := $(SYSSVC_LIBS)
+ INCLUDES := $(INCLUDES)
+ 
+ #
+ #  カーネルに関する定義
+ #
+ #  KERNEL_ASMOBJS: カーネルライブラリに含める，ソースがアセンブリ言語の
+ #				   オブジェクトファイル．
+ #  KERNEL_COBJS: カーネルのライブラリに含める，ソースがC言語で，ソース
+ #				 ファイルと1対1に対応するオブジェクトファイル．
+ #  KERNEL_LCSRCS: カーネルのライブラリに含めるC言語のソースファイルで，
+ #				  1つのソースファイルから複数のオブジェクトファイルを生
+ #				  成するもの．
+ #  KERNEL_LCOBJS: 上のソースファイルから生成されるオブジェクトファイル．
+ #  KERNEL_AUX_COBJS: ロードモジュールに含めないが，カーネルのソースファ
+ #					 イルと同じオプションを適用してコンパイルすべき，ソー
+ #					 スがC言語のオブジェクトファイル．
+ #
+ KERNEL_DIR := $(KERNEL_DIR) $(SRCDIR)/kernel
+ KERNEL_ASMOBJS := $(KERNEL_ASMOBJS)
+ KERNEL_COBJS := $(KERNEL_COBJS)
+ KERNEL_CFLAGS := $(KERNEL_CFLAGS) -I$(SRCDIR)/kernel
+ ifdef OMIT_MAKEOFFSET
+   OFFSET_H =
+ else
+   OFFSET_H = offset.h
+ ifndef OFFSET_TF
+   KERNEL_AUX_COBJS := $(KERNEL_AUX_COBJS) makeoffset.o
+ endif
+ endif
+ 
+ #
+ #  ターゲットファイル（複数を同時に選択してはならない）
+ #
+ all: $(OBJFILE)
+ #all: $(OBJNAME).bin
+ #all: $(OBJNAME).srec
+ 
+ ##### 以下は編集しないこと #####
+ 
+ #
+ #  環境に依存するコンパイルオプションの定義
+ #
+ ifdef DBGENV
+   CDEFS := $(CDEFS) -D$(DBGENV)
+ endif
+ 
+ #
+ #  カーネルのファイル構成の定義
+ #
+ include $(SRCDIR)/kernel/Makefile.kernel
+ ifdef KERNEL_FUNCOBJS
+   KERNEL_LCSRCS := $(KERNEL_FCSRCS)
+   KERNEL_LCOBJS := $(foreach file,$(KERNEL_FCSRCS),$($(file:.c=)))
+ else
+   KERNEL_CFLAGS := -DALLFUNC $(KERNEL_CFLAGS)
+   KERNEL_COBJS := $(KERNEL_COBJS) \
+ 					$(foreach file,$(KERNEL_FCSRCS),$(file:.c=.o))
+ endif
+ 
+ #
+ #  ソースファイルのあるディレクトリに関する定義
+ #
+ vpath %.c $(KERNEL_DIR) $(SYSSVC_DIR) $(APPL_DIR)
+ vpath %.S $(KERNEL_DIR) $(SYSSVC_DIR) $(APPL_DIR)
+ vpath %.cfg $(APPL_DIR)
+ 
+ #
+ #  コンパイルのための変数の定義
+ #
+ KERNEL_LIB_OBJS = $(KERNEL_ASMOBJS) $(KERNEL_COBJS) $(KERNEL_LCOBJS)
+ SYSSVC_OBJS = $(SYSSVC_ASMOBJS) $(SYSSVC_COBJS)
+ APPL_OBJS = $(APPL_ASMOBJS) $(APPL_COBJS) $(APPL_CXXOBJS)
+ ALL_OBJS = $(START_OBJS) $(APPL_OBJS) $(SYSSVC_OBJS) $(CFG_OBJS) \
+ 											$(END_OBJS) $(HIDDEN_OBJS)
+ ifdef KERNEL_LIB
+   ALL_LIBS = $(APPL_LIBS) $(SYSSVC_LIBS) -lkernel $(LIBS)
+   LIBS_DEP = $(filter %.a,$(ALL_LIBS)) $(KERNEL_LIB)/libkernel.a
+   LDFLAGS := $(LDFLAGS) -L$(KERNEL_LIB)
+   REALCLEAN_FILES := libkernel.a $(REALCLEAN_FILES)
+ else
+   ALL_LIBS = $(APPL_LIBS) $(SYSSVC_LIBS) libkernel.a $(LIBS)
+   LIBS_DEP = $(filter %.a,$(ALL_LIBS))
+ endif
+ 
+ ifdef TEXT_START_ADDRESS
+   LDFLAGS := $(LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)
+   CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)
+ endif
+ ifdef DATA_START_ADDRESS
+   LDFLAGS := $(LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)
+   CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)
+ endif
+ ifdef LDSCRIPT
+   LDFLAGS := $(LDFLAGS) -T $(LDSCRIPT)
+   CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -T $(LDSCRIPT)
+ endif
+ 
+ #
+ #  オフセットファイル（offset.h）の生成規則
+ #
+ ifdef OFFSET_TF
+ offset.h: $(APPL_CFG) kernel_cfg.timestamp
+ 	$(CFG) --pass 3 --kernel asp $(INCLUDES) \
+ 				--rom-image cfg1_out.srec --symbol-table cfg1_out.syms \
+ 				-T $(OFFSET_TF) $(CFG_TABS) $<
+ else
+ offset.h: makeoffset.s $(SRCDIR)/utils/genoffset
+ 	$(PERL) $(SRCDIR)/utils/genoffset makeoffset.s > offset.h
+ endif
+ 
+ #
+ #  カーネルのコンフィギュレーションファイルの生成
+ #
+ cfg1_out.c: $(APPL_CFG)
+ 	$(CFG) --pass 1 --kernel asp $(INCLUDES) $(CFG_TABS) $<
+ 
+ $(CFG2_OUT_SRCS): kernel_cfg.timestamp
+ kernel_cfg.timestamp: $(APPL_CFG) \
+ 						$(START_OBJS) cfg1_out.o $(END_OBJS) $(HIDDEN_OBJS)
+ 	$(LINK) $(CFLAGS) $(CFG1_OUT_LDFLAGS) -o $(CFG1_OUT) \
+ 						$(START_OBJS) cfg1_out.o $(END_OBJS)
+ 	$(NM) -n $(CFG1_OUT) > cfg1_out.syms
+ 	$(OBJCOPY) -O srec -S $(CFG1_OUT) cfg1_out.srec
+ 	$(CFG) --pass 2 --kernel asp $(INCLUDES) \
+ 				-T $(TARGETDIR)/target.tf $(CFG_TABS) $<
+ 	touch -r kernel_cfg.c kernel_cfg.timestamp
+ 
+ #
+ #  カーネルライブラリファイルの生成
+ #
+ libkernel.a: $(OFFSET_H) $(KERNEL_LIB_OBJS)
+ 	rm -f libkernel.a
+ 	$(AR) -rcs libkernel.a $(KERNEL_LIB_OBJS)
+ 	$(RANLIB) libkernel.a
+ 
+ #
+ #  特別な依存関係の定義
+ #
+ banner.o: kernel_cfg.timestamp $(filter-out banner.o,$(ALL_OBJS)) $(LIBS_DEP)
+ 
+ #
+ #  全体のリンク
+ #
+ $(OBJFILE): $(APPL_CFG) kernel_cfg.timestamp $(ALL_OBJS) $(LIBS_DEP) 
+ 	
+ 	$(LINK) $(CFLAGS) $(LDFLAGS) -o $(OBJFILE) $(START_OBJS) \
+ 			$(APPL_OBJS) $(SYSSVC_OBJS) $(CFG_OBJS) $(ALL_LIBS) $(END_OBJS)
+ 		rm -f libasp.a
+ 		
+ 	$(AR) -rcs libasp.a $(ALL_OBJS) $(KERNEL_LIB_OBJS)
+ 	$(AR) -d  libasp.a dummy.o 				
+ 	$(NM) -n $(OBJFILE) > $(OBJNAME).syms
+ 	
+ 	$(OBJCOPY) -O srec -S $(OBJFILE) $(OBJNAME).srec
+ 	$(CFG) --pass 3 --kernel asp $(INCLUDES) \
+ 				--rom-image $(OBJNAME).srec --symbol-table $(OBJNAME).syms \
+ 				-T $(TARGETDIR)/target_check.tf $(CFG_TABS) $<
+ 
+ #
+ #  バイナリファイルの生成
+ #
+ $(OBJNAME).bin: $(OBJFILE)
+ 	$(OBJCOPY) -O binary -S $(OBJFILE) $(OBJNAME).bin
+ 
+ #
+ #  Sレコードファイルの生成
+ #
+ $(OBJNAME).srec: $(OBJFILE)
+ 	$(OBJCOPY) -O srec -S $(OBJFILE) $(OBJNAME).srec
+ 
+ #
+ #  コンパイル結果の消去
+ #
+ .PHONY: clean
+ clean:
+ 	rm -f \#* *~ *.o ../*.o $(CLEAN_FILES)
+ 	rm -f $(OBJFILE) $(OBJNAME).syms $(OBJNAME).srec $(OBJNAME).bin
+ 	rm -f kernel_cfg.timestamp $(CFG2_OUT_SRCS)
+ 	rm -f cfg1_out.c $(CFG1_OUT) cfg1_out.syms cfg1_out.srec
+ ifndef KERNEL_LIB
+ 	rm -f libkernel.a
+ endif
+ 	rm -f makeoffset.s offset.h
+ 
+ .PHONY: cleankernel
+ cleankernel:
+ 	rm -rf $(KERNEL_LIB_OBJS)
+ 	rm -f makeoffset.s offset.h
+ 
+ .PHONY: cleandep
+ cleandep:
+ 	if ! [ -f Makefile.depend ]; then \
+ 		rm -f kernel_cfg.timestamp $(CFG2_OUT_SRCS); \
+ 		rm -f cfg1_out.c cfg1_out.o $(CFG1_OUT) cfg1_out.syms cfg1_out.srec; \
+ 		rm -f makeoffset.s offset.h; \
+ 	fi
+ 	rm -f Makefile.depend
+ 
+ .PHONY: realclean
+ realclean: cleandep clean
+ 	rm -f $(REALCLEAN_FILES)
+ 
+ #
+ #  コンフィギュレータが生成したファイルのコンパイルルールと依存関係作成
+ #  ルールの定義
+ #
+ #  コンフィギュレータが生成したファイルは，アプリケーションプログラム用，
+ #  システムサービス用，カーネル用のすべてのオプションを付けてコンパイル
+ #  する．
+ #
+ ALL_CFG_COBJS = $(CFG_COBJS) cfg1_out.o
+ ALL_CFG_ASMOBJS = $(CFG_ASMOBJS)
+ CFG_CFLAGS = $(APPL_CFLAGS) $(SYSSVC_CFLAGS) $(KERNEL_CFLAGS)
+ 
+ $(ALL_CFG_COBJS): %.o: %.c
+ 	$(CC) -c $(CFLAGS) $(CFG_CFLAGS) $<
+ 
+ $(ALL_CFG_COBJS:.o=.s): %.s: %.c
+ 	$(CC) -S $(CFLAGS) $(CFG_CFLAGS) $<
+ 
+ $(ALL_CFG_COBJS:.o=.d): %.d: %.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(CFG_CFLAGS)" $< >> Makefile.depend
+ 
+ $(ALL_CFG_ASMOBJS): %.o: %.S
+ 	$(CC) -c $(CFLAGS) $(CFG_CFLAGS) $<
+ 
+ $(ALL_CFG_ASMOBJS:.o=.d): %.d: %.S
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(CFG_CFLAGS)" $< >> Makefile.depend
+ 
+ #
+ #  特殊な依存関係作成ルールの定義
+ #
+ cfg1_out.depend: $(APPL_CFG)
+ 	@$(CFG) -M cfg1_out.c $(INCLUDES) $< >> Makefile.depend
+ 
+ makeoffset.d: makeoffset.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-T "makeoffset.s" -O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend
+ 
+ #
+ #  依存関係ファイルの生成
+ #
+ .PHONY: gendepend
+ gendepend:
+ 	@echo "Generating Makefile.depend."
+ 
+ .PHONY: depend
+ ifdef KERNEL_LIB
+ depend: cleandep kernel_cfg.timestamp gendepend \
+ 		cfg1_out.depend cfg1_out.d \
+ 		$(ALL_OBJS:.o=.d)
+ else
+ depend: cleandep $(OFFSET_H) kernel_cfg.timestamp gendepend \
+ 		cfg1_out.depend cfg1_out.d \
+ 		$(KERNEL_AUX_COBJS:.o=.d) $(KERNEL_ASMOBJS:.o=.d) \
+ 		$(KERNEL_COBJS:.o=.d) $(KERNEL_LCSRCS:.c=.d) $(ALL_OBJS:.o=.d)
+ endif
+ 
+ #
+ #  依存関係ファイルをインクルード
+ #
+ -include Makefile.depend
+ 
+ #
+ #  開発ツールのコマンド名の定義
+ #
+ ifeq ($(TOOL),gcc)
+   #
+   #  GNU開発環境用
+   #
+   ifdef GCC_TARGET
+     GCC_TARGET_PREFIX = $(GCC_TARGET)-
+   else
+     GCC_TARGET_PREFIX =
+   endif
+   CC = $(GCC_TARGET_PREFIX)gcc
+   CXX = $(GCC_TARGET_PREFIX)g++
+   AS = $(GCC_TARGET_PREFIX)as
+   LD = $(GCC_TARGET_PREFIX)ld
+   AR = $(GCC_TARGET_PREFIX)ar
+   NM = $(GCC_TARGET_PREFIX)nm
+   RANLIB = $(GCC_TARGET_PREFIX)ranlib
+   OBJCOPY = $(GCC_TARGET_PREFIX)objcopy
+   OBJDUMP = $(GCC_TARGET_PREFIX)objdump
+ endif
+ 
+ ifdef USE_CXX
+   LINK = $(CXX)
+ else
+   LINK = $(CC)
+ endif
+ 
+ #
+ #  コンパイルルールの定義
+ #
+ KERNEL_ALL_COBJS = $(KERNEL_COBJS) $(KERNEL_AUX_COBJS)
+ 
+ $(KERNEL_ALL_COBJS): %.o: %.c
+ 	$(CC) -c $(CFLAGS) $(KERNEL_CFLAGS) $<
+ 
+ $(KERNEL_ALL_COBJS:.o=.s): %.s: %.c
+ 	$(CC) -S $(CFLAGS) $(KERNEL_CFLAGS) $<
+ 
+ $(KERNEL_LCOBJS): %.o:
+ 	$(CC) -DTOPPERS_$(*F) -o $@ -c $(CFLAGS) $(KERNEL_CFLAGS) $<
+ 
+ $(KERNEL_LCOBJS:.o=.s): %.s:
+ 	$(CC) -DTOPPERS_$(*F) -o $@ -S $(CFLAGS) $(KERNEL_CFLAGS) $<
+ 
+ $(KERNEL_ASMOBJS): %.o: %.S
+ 	$(CC) -c $(CFLAGS) $(KERNEL_CFLAGS) $<
+ 
+ $(SYSSVC_COBJS): %.o: %.c
+ 	$(CC) -c $(CFLAGS) $(SYSSVC_CFLAGS) $<
+ 
+ $(SYSSVC_COBJS:.o=.s): %.s: %.c
+ 	$(CC) -S $(CFLAGS) $(SYSSVC_CFLAGS) $<
+ 
+ $(SYSSVC_ASMOBJS): %.o: %.S
+ 	$(CC) -c $(CFLAGS) $(SYSSVC_CFLAGS) $<
+ 
+ $(APPL_COBJS): %.o: %.c
+ 	$(CC) -c $(CFLAGS) $(APPL_CFLAGS) $<
+ 
+ $(APPL_COBJS:.o=.s): %.s: %.c
+ 	$(CC) -S $(CFLAGS) $(APPL_CFLAGS) $<
+ 
+ $(APPL_CXXOBJS): %.o: %.cpp
+ 	$(CXX) -c $(CFLAGS) $(APPL_CFLAGS) $<
+ 
+ $(APPL_CXXOBJS:.o=.s): %.s: %.cpp
+ 	$(CXX) -S $(CFLAGS) $(APPL_CFLAGS) $<
+ 
+ $(APPL_ASMOBJS): %.o: %.S
+ 	$(CC) -c $(CFLAGS) $(APPL_CFLAGS) $<
+ 
+ #
+ #  依存関係作成ルールの定義
+ #
+ $(KERNEL_COBJS:.o=.d): %.d: %.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend
+ 
+ $(KERNEL_LCSRCS:.c=.d): %.d: %.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) -T "$($*)" \
+ 		-O "-DALLFUNC $(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend
+ 
+ $(KERNEL_ASMOBJS:.o=.d): %.d: %.S
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend
+ 
+ $(SYSSVC_COBJS:.o=.d): %.d: %.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(SYSSVC_CFLAGS)" $< >> Makefile.depend
+ 
+ $(SYSSVC_ASMOBJS:.o=.d): %.d: %.S
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(SYSSVC_CFLAGS)" $< >> Makefile.depend
+ 
+ $(APPL_COBJS:.o=.d): %.d: %.c
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(APPL_CFLAGS)" $< >> Makefile.depend
+ 
+ $(APPL_CXXOBJS:.o=.d): %.d: %.cpp
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CXX) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(APPL_CFLAGS)" $< >> Makefile.depend
+ 
+ $(APPL_ASMOBJS:.o=.d): %.d: %.S
+ 	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
+ 		-O "$(CFLAGS) $(APPL_CFLAGS)" $< >> Makefile.depend
+ 
+ #
+ #  デフォルトコンパイルルールを上書き
+ #
+ %.o: %.c
+ 	@echo "*** Default compile rules should not be used."
+ 	$(CC) -c $(CFLAGS) $<
+ 
+ %.s: %.c
+ 	@echo "*** Default compile rules should not be used."
+ 	$(CC) -S $(CFLAGS) $<
+ 
+ %.o: %.cpp
+ 	@echo "*** Default compile rules should not be used."
+ 	$(CXX) -c $(CFLAGS) $<
+ 
+ %.s: %.cpp
+ 	@echo "*** Default compile rules should not be used."
+ 	$(CXX) -S $(CFLAGS) $<
+ 
+ %.o: %.S
+ 	@echo "*** Default compile rules should not be used."
+ 	$(CC) -c $(CFLAGS) $<
diff -cr --new-file asp/sample/sample1.c 1.9.1_update/sample/sample1.c
*** asp/sample/sample1.c	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/sample/sample1.c	Tue Dec 13 14:29:08 2022
***************
*** 136,201 ****
   */
  ulong_t	task_loop;		/* タスク内でのループ回数 */
  ulong_t	tex_loop;		/* 例外処理ルーチン内でのループ回数 */
  
  /*
   *  並行実行されるタスク
   */
  void task(intptr_t exinf)
  {
  	volatile ulong_t	i;
  	int_t		n = 0;
  	int_t		tskno = (int_t) exinf;
  	const char	*graph[] = { "|", "  +", "    *" };
  	char		c;
- 
  	SVC_PERROR(ena_tex());
  	while (true) {
  		tslp_tsk(500);
  		syslog(LOG_NOTICE, "task%d is running (%03d).   %s",
! 										tskno, ++n, graph[tskno-1]);
! 		for (i = 0; i < task_loop; i++);
! 		c = message[tskno-1];
! 		message[tskno-1] = 0;
! 		switch (c) {
! 		case 'e':
! 			syslog(LOG_INFO, "#%d#ext_tsk()", tskno);
! 			SVC_PERROR(ext_tsk());
! 			assert(0);
! 		case 's':
! 			syslog(LOG_INFO, "#%d#slp_tsk()", tskno);
! 			SVC_PERROR(slp_tsk());
! 			break;
! 		case 'S':
! 			syslog(LOG_INFO, "#%d#tslp_tsk(10000)", tskno);
! 			SVC_PERROR(tslp_tsk(10000));
! 			break;
! 		case 'd':
! 			syslog(LOG_INFO, "#%d#dly_tsk(10000)", tskno);
! 			SVC_PERROR(dly_tsk(10000));
! 			break;
! 		case 'y':
! 			syslog(LOG_INFO, "#%d#dis_tex()", tskno);
! 			SVC_PERROR(dis_tex());
! 			break;
! 		case 'Y':
! 			syslog(LOG_INFO, "#%d#ena_tex()", tskno);
! 			SVC_PERROR(ena_tex());
! 			break;
! #ifdef CPUEXC1
! 		case 'z':
! 			syslog(LOG_NOTICE, "#%d#raise CPU exception", tskno);
! 			RAISE_CPU_EXCEPTION;
! 			break;
! 		case 'Z':
! 			SVC_PERROR(loc_cpu());
! 			syslog(LOG_NOTICE, "#%d#raise CPU exception", tskno);
! 			RAISE_CPU_EXCEPTION;
! 			SVC_PERROR(unl_cpu());
! 			break;
! #endif /* CPUEXC1 */
! 		default:
! 			break;
! 		}
  	}
  }
  
--- 136,168 ----
   */
  ulong_t	task_loop;		/* タスク内でのループ回数 */
  ulong_t	tex_loop;		/* 例外処理ルーチン内でのループ回数 */
+ //Wrapper
+ void waisem_ether_wrapper() {
+ 	wai_sem(ETHER_START_SEM);
+ 
+ }
+ void sigsem_ether_wrapper() {
+ 	sig_sem(ETHER_START_SEM);
+ }
  
  /*
   *  並行実行されるタスク
   */
  void task(intptr_t exinf)
  {
+ 
  	volatile ulong_t	i;
  	int_t		n = 0;
  	int_t		tskno = (int_t) exinf;
  	const char	*graph[] = { "|", "  +", "    *" };
  	char		c;
  	SVC_PERROR(ena_tex());
+ 
  	while (true) {
  		tslp_tsk(500);
  		syslog(LOG_NOTICE, "task%d is running (%03d).   %s",
! 					tskno, ++n, graph[tskno-1]);
! 
  	}
  }
  
***************
*** 208,214 ****
  	int_t	tskno = (int_t) exinf;
  
  	syslog(LOG_NOTICE, "task%d receives exception 0x%04x.", tskno, texptn);
! 	for (i = 0; i < tex_loop; i++);
  
  	if ((texptn & 0x8000U) != 0U) {
  		syslog(LOG_INFO, "#%d#ext_tsk()", tskno);
--- 175,181 ----
  	int_t	tskno = (int_t) exinf;
  
  	syslog(LOG_NOTICE, "task%d receives exception 0x%04x.", tskno, texptn);
! //	for (i = 0; i < tex_loop; i++);
  
  	if ((texptn & 0x8000U) != 0U) {
  		syslog(LOG_INFO, "#%d#ext_tsk()", tskno);
***************
*** 307,319 ****
  	 *  ポートがオープン済みの場合にはここでE_OBJエラーになるが，支障は
  	 *  ない．
  	 */
- 	ercd = serial_opn_por(TASK_PORTID);
- 	if (ercd < 0 && MERCD(ercd) != E_OBJ) {
- 		syslog(LOG_ERROR, "%s (%d) reported by `serial_opn_por'.",
- 									itron_strerror(ercd), SERCD(ercd));
- 	}
- 	SVC_PERROR(serial_ctl_por(TASK_PORTID,
- 							(IOCTL_CRLF | IOCTL_FCSND | IOCTL_FCRCV)));
  
  	/*
   	 *  ループ回数の設定
--- 274,279 ----
***************
*** 372,533 ****
  	SVC_PERROR(act_tsk(TASK1));
  	SVC_PERROR(act_tsk(TASK2));
  	SVC_PERROR(act_tsk(TASK3));
  
  	/*
   	 *  メインループ
  	 */
  	do {
! 		SVC_PERROR(serial_rea_dat(TASK_PORTID, &c, 1));
! 		switch (c) {
! 		case 'e':
! 		case 's':
! 		case 'S':
! 		case 'd':
! 		case 'y':
! 		case 'Y':
! 		case 'z':
! 		case 'Z':
! 			message[tskno-1] = c;
! 			break;
! 		case '1':
! 			tskno = 1;
! 			tskid = TASK1;
! 			break;
! 		case '2':
! 			tskno = 2;
! 			tskid = TASK2;
! 			break;
! 		case '3':
! 			tskno = 3;
! 			tskid = TASK3;
! 			break;
! 		case 'a':
! 			syslog(LOG_INFO, "#act_tsk(%d)", tskno);
! 			SVC_PERROR(act_tsk(tskid));
! 			break;
! 		case 'A':
! 			syslog(LOG_INFO, "#can_act(%d)", tskno);
! 			SVC_PERROR(ercd = can_act(tskid));
! 			if (ercd >= 0) {
! 				syslog(LOG_NOTICE, "can_act(%d) returns %d", tskno, ercd);
! 			}
! 			break;
! 		case 't':
! 			syslog(LOG_INFO, "#ter_tsk(%d)", tskno);
! 			SVC_PERROR(ter_tsk(tskid));
! 			break;
! 		case '>':
! 			syslog(LOG_INFO, "#chg_pri(%d, HIGH_PRIORITY)", tskno);
! 			SVC_PERROR(chg_pri(tskid, HIGH_PRIORITY));
! 			break;
! 		case '=':
! 			syslog(LOG_INFO, "#chg_pri(%d, MID_PRIORITY)", tskno);
! 			SVC_PERROR(chg_pri(tskid, MID_PRIORITY));
! 			break;
! 		case '<':
! 			syslog(LOG_INFO, "#chg_pri(%d, LOW_PRIORITY)", tskno);
! 			SVC_PERROR(chg_pri(tskid, LOW_PRIORITY));
! 			break;
! 		case 'G':
! 			syslog(LOG_INFO, "#get_pri(%d, &tskpri)", tskno);
! 			SVC_PERROR(ercd = get_pri(tskid, &tskpri));
! 			if (ercd >= 0) {
! 				syslog(LOG_NOTICE, "priority of task %d is %d", tskno, tskpri);
! 			}
! 			break;
! 		case 'w':
! 			syslog(LOG_INFO, "#wup_tsk(%d)", tskno);
! 			SVC_PERROR(wup_tsk(tskid));
! 			break;
! 		case 'W':
! 			syslog(LOG_INFO, "#can_wup(%d)", tskno);
! 			SVC_PERROR(ercd = can_wup(tskid));
! 			if (ercd >= 0) {
! 				syslog(LOG_NOTICE, "can_wup(%d) returns %d", tskno, ercd);
! 			}
! 			break;
! 		case 'l':
! 			syslog(LOG_INFO, "#rel_wai(%d)", tskno);
! 			SVC_PERROR(rel_wai(tskid));
! 			break;
! 		case 'u':
! 			syslog(LOG_INFO, "#sus_tsk(%d)", tskno);
! 			SVC_PERROR(sus_tsk(tskid));
! 			break;
! 		case 'm':
! 			syslog(LOG_INFO, "#rsm_tsk(%d)", tskno);
! 			SVC_PERROR(rsm_tsk(tskid));
! 			break;
! 		case 'x':
! 			syslog(LOG_INFO, "#ras_tex(%d, 0x0001U)", tskno);
! 			SVC_PERROR(ras_tex(tskid, 0x0001U));
! 			break;
! 		case 'X':
! 			syslog(LOG_INFO, "#ras_tex(%d, 0x0002U)", tskno);
! 			SVC_PERROR(ras_tex(tskid, 0x0002U));
! 			break;
! 		case 'r':
! 			syslog(LOG_INFO, "#rot_rdq(three priorities)");
! 			SVC_PERROR(rot_rdq(HIGH_PRIORITY));
! 			SVC_PERROR(rot_rdq(MID_PRIORITY));
! 			SVC_PERROR(rot_rdq(LOW_PRIORITY));
! 			break;
! 		case 'c':
! 			syslog(LOG_INFO, "#sta_cyc(1)");
! 			SVC_PERROR(sta_cyc(CYCHDR1));
! 			break;
! 		case 'C':
! 			syslog(LOG_INFO, "#stp_cyc(1)");
! 			SVC_PERROR(stp_cyc(CYCHDR1));
! 			break;
! 		case 'b':
! 			syslog(LOG_INFO, "#sta_alm(1, 5000)");
! 			SVC_PERROR(sta_alm(ALMHDR1, 5000));
! 			break;
! 		case 'B':
! 			syslog(LOG_INFO, "#stp_alm(1)");
! 			SVC_PERROR(stp_alm(ALMHDR1));
! 			break;
! 
! 		case 'V':
! #ifdef TOPPERS_SUPPORT_GET_UTM
! 			SVC_PERROR(get_utm(&utime1));
! 			SVC_PERROR(get_utm(&utime2));
! 			syslog(LOG_NOTICE, "utime1 = %ld, utime2 = %ld",
! 										(ulong_t) utime1, (ulong_t) utime2);
! #else /* TOPPERS_SUPPORT_GET_UTM */
! 			syslog(LOG_NOTICE, "get_utm is not supported.");
! #endif /* TOPPERS_SUPPORT_GET_UTM */
! 			break;
  
! 		case 'v':
! 			SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO),
! 										LOG_UPTO(LOG_EMERG)));
! 			break;
! 		case 'q':
! 			SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_NOTICE),
! 										LOG_UPTO(LOG_EMERG)));
! 			break;
! 
! #ifdef BIT_KERNEL
! 		case ' ':
! 			SVC_PERROR(loc_cpu());
! 			{
! 				extern ER	bit_kernel(void);
! 
! 				SVC_PERROR(ercd = bit_kernel());
! 				if (ercd >= 0) {
! 					syslog(LOG_NOTICE, "bit_kernel passed.");
! 				}
! 			}
! 			SVC_PERROR(unl_cpu());
! 			break;
! #endif /* BIT_KERNEL */
! 
! 		default:
! 			break;
! 		}
! 	} while (c != '\003' && c != 'Q');
  
  	syslog(LOG_NOTICE, "Sample program ends.");
  	SVC_PERROR(ext_ker());
--- 332,346 ----
  	SVC_PERROR(act_tsk(TASK1));
  	SVC_PERROR(act_tsk(TASK2));
  	SVC_PERROR(act_tsk(TASK3));
+ 	SVC_PERROR(act_tsk(TASK4));
  
  	/*
   	 *  メインループ
  	 */
  	do {
! 		slp_tsk();
  
! 	} while (1);
  
  	syslog(LOG_NOTICE, "Sample program ends.");
  	SVC_PERROR(ext_ker());
diff -cr --new-file asp/sample/sample1.cfg 1.9.1_update/sample/sample1.cfg
*** asp/sample/sample1.cfg	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/sample/sample1.cfg	Tue Dec 13 14:29:08 2022
***************
*** 6,26 ****
   *  サンプルプログラム(1)のシステムコンフィギュレーションファイル
   */
  INCLUDE("target_timer.cfg");
  INCLUDE("syssvc/syslog.cfg");
  INCLUDE("syssvc/banner.cfg");
- INCLUDE("syssvc/serial.cfg");
  INCLUDE("syssvc/logtask.cfg");
  
  #include "sample1.h"
  CRE_TSK(TASK1, { TA_NULL, 1, task, MID_PRIORITY, STACK_SIZE, NULL });
! CRE_TSK(TASK2, { TA_NULL, 2, task, MID_PRIORITY, STACK_SIZE, NULL });
! CRE_TSK(TASK3, { TA_NULL, 3, task, MID_PRIORITY, STACK_SIZE, NULL });
  CRE_TSK(MAIN_TASK, { TA_ACT, 0, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
  DEF_TEX(TASK1, { TA_NULL, tex_routine });
  DEF_TEX(TASK2, { TA_NULL, tex_routine });
  DEF_TEX(TASK3, { TA_NULL, tex_routine });
  CRE_CYC(CYCHDR1, { TA_NULL, 0, cyclic_handler, 2000, 0 });
  CRE_ALM(ALMHDR1, { TA_NULL, 0, alarm_handler });
  #ifdef CPUEXC1
  DEF_EXC(CPUEXC1, { TA_NULL, cpuexc_handler });
  #endif /* CPUEXC1 */
--- 6,31 ----
   *  サンプルプログラム(1)のシステムコンフィギュレーションファイル
   */
  INCLUDE("target_timer.cfg");
+ INCLUDE("target_edmac.cfg");
  INCLUDE("syssvc/syslog.cfg");
  INCLUDE("syssvc/banner.cfg");
  INCLUDE("syssvc/logtask.cfg");
  
  #include "sample1.h"
  CRE_TSK(TASK1, { TA_NULL, 1, task, MID_PRIORITY, STACK_SIZE, NULL });
! CRE_TSK(TASK2, { TA_NULL, 2, taskEther, MID_PRIORITY, NET_STACK_SIZE , NULL });
! CRE_TSK(TASK3, { TA_NULL, 3, taskDemoWolf, MID_PRIORITY, NET_STACK_SIZE, NULL });
! CRE_TSK(TASK4, { TA_NULL, 4, taskNetWork, MID_PRIORITY, NET_STACK_SIZE, NULL });
! 
  CRE_TSK(MAIN_TASK, { TA_ACT, 0, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
  DEF_TEX(TASK1, { TA_NULL, tex_routine });
  DEF_TEX(TASK2, { TA_NULL, tex_routine });
  DEF_TEX(TASK3, { TA_NULL, tex_routine });
+ DEF_TEX(TASK4, { TA_NULL, tex_routine });
+ 
  CRE_CYC(CYCHDR1, { TA_NULL, 0, cyclic_handler, 2000, 0 });
  CRE_ALM(ALMHDR1, { TA_NULL, 0, alarm_handler });
  #ifdef CPUEXC1
  DEF_EXC(CPUEXC1, { TA_NULL, cpuexc_handler });
+ 
  #endif /* CPUEXC1 */
diff -cr --new-file asp/sample/sample1.h 1.9.1_update/sample/sample1.h
*** asp/sample/sample1.h	Mon Dec 26 16:54:24 2022
--- 1.9.1_update/sample/sample1.h	Tue Dec 13 14:29:08 2022
***************
*** 69,75 ****
  #endif /* TASK_PORTID */
  
  #ifndef STACK_SIZE
! #define	STACK_SIZE		4096		/* タスクのスタックサイズ */
  #endif /* STACK_SIZE */
  
  #ifndef LOOP_REF
--- 69,78 ----
  #endif /* TASK_PORTID */
  
  #ifndef STACK_SIZE
! #define	STACK_SIZE		(4096 * 4)		/* タスクのスタックサイズ */
! #endif /* STACK_SIZE */
! #ifndef NET_STACK_SIZE
! #define	NET_STACK_SIZE		(1024 * 24) 		/* タスクのスタックサイズ */
  #endif /* STACK_SIZE */
  
  #ifndef LOOP_REF
***************
*** 82,88 ****
--- 85,96 ----
  #ifndef TOPPERS_MACRO_ONLY
  
  extern void	task(intptr_t exinf);
+ extern void	taskEther(intptr_t exinf);
+ extern void	taskDemoWolf(intptr_t exinf);
+ extern void	taskNetWork(intptr_t exinf);
+ 
  extern void	main_task(intptr_t exinf);
+ 
  extern void	tex_routine(TEXPTN texptn, intptr_t exinf);
  #ifdef CPUEXC1
  extern void	cpuexc_handler(void *p_excinf);
*** asp/kernel/interrupt.c	Mon Dec 26 16:54:23 2022
--- 1.9.1_update/kernel/interrupt.c	Tue Dec 13 14:29:03 2022
***************
*** 113,118 ****
--- 113,119 ----
  /*
   *  割込みの禁止
   */
+ #undef TOPPERS_dis_int
  #ifdef TOPPERS_dis_int
  #ifdef TOPPERS_SUPPORT_DIS_INT
  
***************
*** 151,156 ****
--- 152,158 ----
  /*
   *  割込みの許可
   */
+ #undef TOPPERS_ena_int
  #ifdef TOPPERS_ena_int
  #ifdef TOPPERS_SUPPORT_ENA_INT
  
*** asp/kernel/kernel_impl.h	Mon Dec 26 16:54:23 2022
--- 1.9.1_update/kernel/kernel_impl.h	Tue Dec 13 14:29:03 2022
***************
*** 125,130 ****
--- 125,131 ----
  #define TMIN_CYCID		1		/* 周期ハンドラIDの最小値 */
  #define TMIN_ALMID		1		/* アラームハンドラIDの最小値 */
  
+ #define EXTERNAL_INIT
  /*
   *  優先度の段階数の定義
   */
